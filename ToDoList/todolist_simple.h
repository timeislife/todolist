#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by xsd, Version=2.0.50727.3038.
// 
namespace ToDoList {
    using namespace System;
    ref class NewDataSet;
    
    
    /// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
    System::Serializable, 
    System::ComponentModel::DesignerCategoryAttribute(L"code"), 
    System::ComponentModel::ToolboxItem(true), 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedDataSetSchema"), 
    System::Xml::Serialization::XmlRootAttribute(L"NewDataSet"), 
    System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.DataSet")]
    public ref class NewDataSet : public ::System::Data::DataSet {
        public : ref class TODOLISTDataTable;
        public : ref class TASKDataTable;
        public : ref class CATEGORYDataTable;
        public : ref class STATUSDataTable;
        public : ref class PERSONDataTable;
        public : ref class ALLOCATEDBYDataTable;
        public : ref class VERSIONDataTable;
        public : ref class TODOLISTRow;
        public : ref class TASKRow;
        public : ref class CATEGORYRow;
        public : ref class STATUSRow;
        public : ref class PERSONRow;
        public : ref class ALLOCATEDBYRow;
        public : ref class VERSIONRow;
        public : ref class TODOLISTRowChangeEvent;
        public : ref class TASKRowChangeEvent;
        public : ref class CATEGORYRowChangeEvent;
        public : ref class STATUSRowChangeEvent;
        public : ref class PERSONRowChangeEvent;
        public : ref class ALLOCATEDBYRowChangeEvent;
        public : ref class VERSIONRowChangeEvent;
        
        private: ToDoList::NewDataSet::TODOLISTDataTable^  tableTODOLIST;
        
        private: ToDoList::NewDataSet::TASKDataTable^  tableTASK;
        
        private: ToDoList::NewDataSet::CATEGORYDataTable^  tableCATEGORY;
        
        private: ToDoList::NewDataSet::STATUSDataTable^  tableSTATUS;
        
        private: ToDoList::NewDataSet::PERSONDataTable^  tablePERSON;
        
        private: ToDoList::NewDataSet::ALLOCATEDBYDataTable^  tableALLOCATEDBY;
        
        private: ToDoList::NewDataSet::VERSIONDataTable^  tableVERSION;
        
        private: ::System::Data::DataRelation^  relationTODOLIST_TASK;
        
        private: ::System::Data::DataRelation^  relationTODOLIST_CATEGORY;
        
        private: ::System::Data::DataRelation^  relationTODOLIST_STATUS;
        
        private: ::System::Data::DataRelation^  relationTODOLIST_PERSON;
        
        private: ::System::Data::DataRelation^  relationTODOLIST_ALLOCATEDBY;
        
        private: ::System::Data::DataRelation^  relationTODOLIST_VERSION;
        
        private: ::System::Data::SchemaSerializationMode _schemaSerializationMode;
        
        public : delegate System::Void TODOLISTRowChangeEventHandler(::System::Object^  sender, ToDoList::NewDataSet::TODOLISTRowChangeEvent^  e);
        
        public : delegate System::Void TASKRowChangeEventHandler(::System::Object^  sender, ToDoList::NewDataSet::TASKRowChangeEvent^  e);
        
        public : delegate System::Void CATEGORYRowChangeEventHandler(::System::Object^  sender, ToDoList::NewDataSet::CATEGORYRowChangeEvent^  e);
        
        public : delegate System::Void STATUSRowChangeEventHandler(::System::Object^  sender, ToDoList::NewDataSet::STATUSRowChangeEvent^  e);
        
        public : delegate System::Void PERSONRowChangeEventHandler(::System::Object^  sender, ToDoList::NewDataSet::PERSONRowChangeEvent^  e);
        
        public : delegate System::Void ALLOCATEDBYRowChangeEventHandler(::System::Object^  sender, ToDoList::NewDataSet::ALLOCATEDBYRowChangeEvent^  e);
        
        public : delegate System::Void VERSIONRowChangeEventHandler(::System::Object^  sender, ToDoList::NewDataSet::VERSIONRowChangeEvent^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        NewDataSet();
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property ToDoList::NewDataSet::TODOLISTDataTable^  TODOLIST {
            ToDoList::NewDataSet::TODOLISTDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property ToDoList::NewDataSet::TASKDataTable^  TASK {
            ToDoList::NewDataSet::TASKDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property ToDoList::NewDataSet::CATEGORYDataTable^  CATEGORY {
            ToDoList::NewDataSet::CATEGORYDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property ToDoList::NewDataSet::STATUSDataTable^  STATUS {
            ToDoList::NewDataSet::STATUSDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property ToDoList::NewDataSet::PERSONDataTable^  PERSON {
            ToDoList::NewDataSet::PERSONDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property ToDoList::NewDataSet::ALLOCATEDBYDataTable^  ALLOCATEDBY {
            ToDoList::NewDataSet::ALLOCATEDBYDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property ToDoList::NewDataSet::VERSIONDataTable^  VERSION {
            ToDoList::NewDataSet::VERSIONDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::BrowsableAttribute(true), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Visible)]
        virtual property ::System::Data::SchemaSerializationMode SchemaSerializationMode {
            ::System::Data::SchemaSerializationMode get() override;
            System::Void set(::System::Data::SchemaSerializationMode value) override;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataTableCollection^  Tables {
            ::System::Data::DataTableCollection^  get() new;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataRelationCollection^  Relations {
            ::System::Data::DataRelationCollection^  get() new;
        }
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void InitializeDerivedDataSet() override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataSet^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Boolean ShouldSerializeTables() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Boolean ShouldSerializeRelations() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void ReadXmlSerializable(::System::Xml::XmlReader^  reader) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Xml::Schema::XmlSchema^  GetSchemaSerializable() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars();
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars(::System::Boolean initTable);
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitClass();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeTODOLIST();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeTASK();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeCATEGORY();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeSTATUS();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializePERSON();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeALLOCATEDBY();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeVERSION();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class TODOLISTDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnCUSTOMCOMMENTSTYPE;
            
            private: ::System::Data::DataColumn^  columnPROJECTNAME;
            
            private: ::System::Data::DataColumn^  columnNEXTUNIQUEID;
            
            private: ::System::Data::DataColumn^  columnLASTMODIFIED;
            
            private: ::System::Data::DataColumn^  columnFILEVERSION;
            
            private: ::System::Data::DataColumn^  columnFILENAME;
            
            private: ::System::Data::DataColumn^  columnFILEFORMAT;
            
            private: ::System::Data::DataColumn^  columnEARLIESTDUEDATE;
            
            private: ::System::Data::DataColumn^  columnTODOLIST_Id;
            
            public: event ToDoList::NewDataSet::TODOLISTRowChangeEventHandler^  TODOLISTRowChanging;
            
            public: event ToDoList::NewDataSet::TODOLISTRowChangeEventHandler^  TODOLISTRowChanged;
            
            public: event ToDoList::NewDataSet::TODOLISTRowChangeEventHandler^  TODOLISTRowDeleting;
            
            public: event ToDoList::NewDataSet::TODOLISTRowChangeEventHandler^  TODOLISTRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TODOLISTDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TODOLISTDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TODOLISTDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  CUSTOMCOMMENTSTYPEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  PROJECTNAMEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  NEXTUNIQUEIDColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  LASTMODIFIEDColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  FILEVERSIONColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  FILENAMEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  FILEFORMATColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  EARLIESTDUEDATEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  TODOLIST_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ToDoList::NewDataSet::TODOLISTRow^  default [::System::Int32 ] {
                ToDoList::NewDataSet::TODOLISTRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddTODOLISTRow(ToDoList::NewDataSet::TODOLISTRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ToDoList::NewDataSet::TODOLISTRow^  AddTODOLISTRow(
                        System::String^  CUSTOMCOMMENTSTYPE, 
                        System::String^  PROJECTNAME, 
                        System::String^  NEXTUNIQUEID, 
                        System::String^  LASTMODIFIED, 
                        System::String^  FILEVERSION, 
                        System::String^  FILENAME, 
                        System::String^  FILEFORMAT, 
                        System::String^  EARLIESTDUEDATE);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ToDoList::NewDataSet::TODOLISTRow^  NewTODOLISTRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveTODOLISTRow(ToDoList::NewDataSet::TODOLISTRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class TASKDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnALLOCATEDBY;
            
            private: ::System::Data::DataColumn^  columnCALCCOST;
            
            private: ::System::Data::DataColumn^  columnCALCPERCENTDONE;
            
            private: ::System::Data::DataColumn^  columnCALCTIMEESTIMATE;
            
            private: ::System::Data::DataColumn^  columnCALCTIMESPENT;
            
            private: ::System::Data::DataColumn^  columnCATEGORY;
            
            private: ::System::Data::DataColumn^  columnCATEGORY1;
            
            private: ::System::Data::DataColumn^  columnCATEGORY2;
            
            private: ::System::Data::DataColumn^  columnCATEGORY3;
            
            private: ::System::Data::DataColumn^  columnCATEGORY4;
            
            private: ::System::Data::DataColumn^  columnCATEGORY5;
            
            private: ::System::Data::DataColumn^  columnCATEGORY6;
            
            private: ::System::Data::DataColumn^  columnCATEGORY7;
            
            private: ::System::Data::DataColumn^  columnCATEGORY8;
            
            private: ::System::Data::DataColumn^  columnCATEGORY9;
            
            private: ::System::Data::DataColumn^  columnCOLOR;
            
            private: ::System::Data::DataColumn^  columnCOMMENTS;
            
            private: ::System::Data::DataColumn^  columnCOMMENTSTYPE;
            
            private: ::System::Data::DataColumn^  columnCOST;
            
            private: ::System::Data::DataColumn^  columnCREATIONDATE;
            
            private: ::System::Data::DataColumn^  columnCREATIONDATESTRING;
            
            private: ::System::Data::DataColumn^  columnCUSTOMCOMMENTS;
            
            private: ::System::Data::DataColumn^  columnDEPENDS;
            
            private: ::System::Data::DataColumn^  columnDEPENDS1;
            
            private: ::System::Data::DataColumn^  columnDEPENDS2;
            
            private: ::System::Data::DataColumn^  columnDEPENDS3;
            
            private: ::System::Data::DataColumn^  columnDEPENDS4;
            
            private: ::System::Data::DataColumn^  columnDEPENDS5;
            
            private: ::System::Data::DataColumn^  columnDEPENDS6;
            
            private: ::System::Data::DataColumn^  columnDEPENDS7;
            
            private: ::System::Data::DataColumn^  columnDEPENDS8;
            
            private: ::System::Data::DataColumn^  columnDEPENDS9;
            
            private: ::System::Data::DataColumn^  columnDONEDATE;
            
            private: ::System::Data::DataColumn^  columnDONEDATESTRING;
            
            private: ::System::Data::DataColumn^  columnDUEDATE;
            
            private: ::System::Data::DataColumn^  columnDUEDATESTRING;
            
            private: ::System::Data::DataColumn^  columnEXTERNALID;
            
            private: ::System::Data::DataColumn^  columnFILEREFPATH;
            
            private: ::System::Data::DataColumn^  columnFLAG;
            
            private: ::System::Data::DataColumn^  columnICONINDEX;
            
            private: ::System::Data::DataColumn^  columnID;
            
            private: ::System::Data::DataColumn^  columnLASTMOD;
            
            private: ::System::Data::DataColumn^  columnLASTMODSTRING;
            
            private: ::System::Data::DataColumn^  columnNUMCATEGORY;
            
            private: ::System::Data::DataColumn^  columnNUMDEPENDS;
            
            private: ::System::Data::DataColumn^  columnNUMPERSON;
            
            private: ::System::Data::DataColumn^  columnPERCENTDONE;
            
            private: ::System::Data::DataColumn^  columnPERSON;
            
            private: ::System::Data::DataColumn^  columnPERSON1;
            
            private: ::System::Data::DataColumn^  columnPERSON2;
            
            private: ::System::Data::DataColumn^  columnPERSON3;
            
            private: ::System::Data::DataColumn^  columnPERSON4;
            
            private: ::System::Data::DataColumn^  columnPERSON5;
            
            private: ::System::Data::DataColumn^  columnPERSON6;
            
            private: ::System::Data::DataColumn^  columnPERSON7;
            
            private: ::System::Data::DataColumn^  columnPERSON8;
            
            private: ::System::Data::DataColumn^  columnPERSON9;
            
            private: ::System::Data::DataColumn^  columnPOS;
            
            private: ::System::Data::DataColumn^  columnPRIORITY;
            
            private: ::System::Data::DataColumn^  columnPRIORITYCOLOR;
            
            private: ::System::Data::DataColumn^  columnPRIORITYWEBCOLOR;
            
            private: ::System::Data::DataColumn^  columnRISK;
            
            private: ::System::Data::DataColumn^  columnSTARTDATE;
            
            private: ::System::Data::DataColumn^  columnSTARTDATESTRING;
            
            private: ::System::Data::DataColumn^  columnSTATUS;
            
            private: ::System::Data::DataColumn^  columnTEXTCOLOR;
            
            private: ::System::Data::DataColumn^  columnTEXTWEBCOLOR;
            
            private: ::System::Data::DataColumn^  columnTIMEESTIMATE;
            
            private: ::System::Data::DataColumn^  columnTIMEESTUNITS;
            
            private: ::System::Data::DataColumn^  columnTIMESPENT;
            
            private: ::System::Data::DataColumn^  columnTIMESPENTUNITS;
            
            private: ::System::Data::DataColumn^  columnTITLE;
            
            private: ::System::Data::DataColumn^  columnVERSION;
            
            private: ::System::Data::DataColumn^  columnWEBCOLOR;
            
            private: ::System::Data::DataColumn^  columnTODOLIST_Id;
            
            public: event ToDoList::NewDataSet::TASKRowChangeEventHandler^  TASKRowChanging;
            
            public: event ToDoList::NewDataSet::TASKRowChangeEventHandler^  TASKRowChanged;
            
            public: event ToDoList::NewDataSet::TASKRowChangeEventHandler^  TASKRowDeleting;
            
            public: event ToDoList::NewDataSet::TASKRowChangeEventHandler^  TASKRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TASKDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TASKDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TASKDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ALLOCATEDBYColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  CALCCOSTColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  CALCPERCENTDONEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  CALCTIMEESTIMATEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  CALCTIMESPENTColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  CATEGORYColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  CATEGORY1Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  CATEGORY2Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  CATEGORY3Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  CATEGORY4Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  CATEGORY5Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  CATEGORY6Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  CATEGORY7Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  CATEGORY8Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  CATEGORY9Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  COLORColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  COMMENTSColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  COMMENTSTYPEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  COSTColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  CREATIONDATEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  CREATIONDATESTRINGColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  CUSTOMCOMMENTSColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  DEPENDSColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  DEPENDS1Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  DEPENDS2Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  DEPENDS3Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  DEPENDS4Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  DEPENDS5Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  DEPENDS6Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  DEPENDS7Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  DEPENDS8Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  DEPENDS9Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  DONEDATEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  DONEDATESTRINGColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  DUEDATEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  DUEDATESTRINGColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  EXTERNALIDColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  FILEREFPATHColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  FLAGColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ICONINDEXColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  IDColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  LASTMODColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  LASTMODSTRINGColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  NUMCATEGORYColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  NUMDEPENDSColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  NUMPERSONColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  PERCENTDONEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  PERSONColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  PERSON1Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  PERSON2Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  PERSON3Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  PERSON4Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  PERSON5Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  PERSON6Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  PERSON7Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  PERSON8Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  PERSON9Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  POSColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  PRIORITYColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  PRIORITYCOLORColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  PRIORITYWEBCOLORColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  RISKColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  STARTDATEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  STARTDATESTRINGColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  STATUSColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  TEXTCOLORColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  TEXTWEBCOLORColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  TIMEESTIMATEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  TIMEESTUNITSColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  TIMESPENTColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  TIMESPENTUNITSColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  TITLEColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  VERSIONColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  WEBCOLORColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  TODOLIST_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ToDoList::NewDataSet::TASKRow^  default [::System::Int32 ] {
                ToDoList::NewDataSet::TASKRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddTASKRow(ToDoList::NewDataSet::TASKRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ToDoList::NewDataSet::TASKRow^  AddTASKRow(
                        System::String^  ALLOCATEDBY, 
                        System::String^  CALCCOST, 
                        System::String^  CALCPERCENTDONE, 
                        System::String^  CALCTIMEESTIMATE, 
                        System::String^  CALCTIMESPENT, 
                        System::String^  CATEGORY, 
                        System::String^  CATEGORY1, 
                        System::String^  CATEGORY2, 
                        System::String^  CATEGORY3, 
                        System::String^  CATEGORY4, 
                        System::String^  CATEGORY5, 
                        System::String^  CATEGORY6, 
                        System::String^  CATEGORY7, 
                        System::String^  CATEGORY8, 
                        System::String^  CATEGORY9, 
                        System::String^  COLOR, 
                        System::String^  COMMENTS, 
                        System::String^  COMMENTSTYPE, 
                        System::String^  COST, 
                        System::String^  CREATIONDATE, 
                        System::String^  CREATIONDATESTRING, 
                        System::String^  CUSTOMCOMMENTS, 
                        System::String^  DEPENDS, 
                        System::String^  DEPENDS1, 
                        System::String^  DEPENDS2, 
                        System::String^  DEPENDS3, 
                        System::String^  DEPENDS4, 
                        System::String^  DEPENDS5, 
                        System::String^  DEPENDS6, 
                        System::String^  DEPENDS7, 
                        System::String^  DEPENDS8, 
                        System::String^  DEPENDS9, 
                        System::String^  DONEDATE, 
                        System::String^  DONEDATESTRING, 
                        System::String^  DUEDATE, 
                        System::String^  DUEDATESTRING, 
                        System::String^  EXTERNALID, 
                        System::String^  FILEREFPATH, 
                        System::String^  FLAG, 
                        System::String^  ICONINDEX, 
                        System::String^  ID, 
                        System::String^  LASTMOD, 
                        System::String^  LASTMODSTRING, 
                        System::String^  NUMCATEGORY, 
                        System::String^  NUMDEPENDS, 
                        System::String^  NUMPERSON, 
                        System::String^  PERCENTDONE, 
                        System::String^  PERSON, 
                        System::String^  PERSON1, 
                        System::String^  PERSON2, 
                        System::String^  PERSON3, 
                        System::String^  PERSON4, 
                        System::String^  PERSON5, 
                        System::String^  PERSON6, 
                        System::String^  PERSON7, 
                        System::String^  PERSON8, 
                        System::String^  PERSON9, 
                        System::String^  POS, 
                        System::String^  PRIORITY, 
                        System::String^  PRIORITYCOLOR, 
                        System::String^  PRIORITYWEBCOLOR, 
                        System::String^  RISK, 
                        System::String^  STARTDATE, 
                        System::String^  STARTDATESTRING, 
                        System::String^  STATUS, 
                        System::String^  TEXTCOLOR, 
                        System::String^  TEXTWEBCOLOR, 
                        System::String^  TIMEESTIMATE, 
                        System::String^  TIMEESTUNITS, 
                        System::String^  TIMESPENT, 
                        System::String^  TIMESPENTUNITS, 
                        System::String^  TITLE, 
                        System::String^  VERSION, 
                        System::String^  WEBCOLOR, 
                        ToDoList::NewDataSet::TODOLISTRow^  parentTODOLISTRowByTODOLIST_TASK);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ToDoList::NewDataSet::TASKRow^  NewTASKRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveTASKRow(ToDoList::NewDataSet::TASKRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class CATEGORYDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnCATEGORY9;
            
            private: ::System::Data::DataColumn^  columnCATEGORY8;
            
            private: ::System::Data::DataColumn^  columnCATEGORY7;
            
            private: ::System::Data::DataColumn^  columnCATEGORY6;
            
            private: ::System::Data::DataColumn^  columnCATEGORY5;
            
            private: ::System::Data::DataColumn^  columnCATEGORY4;
            
            private: ::System::Data::DataColumn^  columnCATEGORY3;
            
            private: ::System::Data::DataColumn^  columnCATEGORY2;
            
            private: ::System::Data::DataColumn^  columnCATEGORY1;
            
            private: ::System::Data::DataColumn^  columnCATEGORY0;
            
            private: ::System::Data::DataColumn^  columnTODOLIST_Id;
            
            public: event ToDoList::NewDataSet::CATEGORYRowChangeEventHandler^  CATEGORYRowChanging;
            
            public: event ToDoList::NewDataSet::CATEGORYRowChangeEventHandler^  CATEGORYRowChanged;
            
            public: event ToDoList::NewDataSet::CATEGORYRowChangeEventHandler^  CATEGORYRowDeleting;
            
            public: event ToDoList::NewDataSet::CATEGORYRowChangeEventHandler^  CATEGORYRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            CATEGORYDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            CATEGORYDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            CATEGORYDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  CATEGORY9Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  CATEGORY8Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  CATEGORY7Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  CATEGORY6Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  CATEGORY5Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  CATEGORY4Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  CATEGORY3Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  CATEGORY2Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  CATEGORY1Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  CATEGORY0Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  TODOLIST_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ToDoList::NewDataSet::CATEGORYRow^  default [::System::Int32 ] {
                ToDoList::NewDataSet::CATEGORYRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddCATEGORYRow(ToDoList::NewDataSet::CATEGORYRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ToDoList::NewDataSet::CATEGORYRow^  AddCATEGORYRow(
                        System::String^  CATEGORY9, 
                        System::String^  CATEGORY8, 
                        System::String^  CATEGORY7, 
                        System::String^  CATEGORY6, 
                        System::String^  CATEGORY5, 
                        System::String^  CATEGORY4, 
                        System::String^  CATEGORY3, 
                        System::String^  CATEGORY2, 
                        System::String^  CATEGORY1, 
                        System::String^  CATEGORY0, 
                        ToDoList::NewDataSet::TODOLISTRow^  parentTODOLISTRowByTODOLIST_CATEGORY);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ToDoList::NewDataSet::CATEGORYRow^  NewCATEGORYRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveCATEGORYRow(ToDoList::NewDataSet::CATEGORYRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class STATUSDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnSTATUS9;
            
            private: ::System::Data::DataColumn^  columnSTATUS8;
            
            private: ::System::Data::DataColumn^  columnSTATUS7;
            
            private: ::System::Data::DataColumn^  columnSTATUS6;
            
            private: ::System::Data::DataColumn^  columnSTATUS5;
            
            private: ::System::Data::DataColumn^  columnSTATUS4;
            
            private: ::System::Data::DataColumn^  columnSTATUS3;
            
            private: ::System::Data::DataColumn^  columnSTATUS2;
            
            private: ::System::Data::DataColumn^  columnSTATUS1;
            
            private: ::System::Data::DataColumn^  columnSTATUS0;
            
            private: ::System::Data::DataColumn^  columnTODOLIST_Id;
            
            public: event ToDoList::NewDataSet::STATUSRowChangeEventHandler^  STATUSRowChanging;
            
            public: event ToDoList::NewDataSet::STATUSRowChangeEventHandler^  STATUSRowChanged;
            
            public: event ToDoList::NewDataSet::STATUSRowChangeEventHandler^  STATUSRowDeleting;
            
            public: event ToDoList::NewDataSet::STATUSRowChangeEventHandler^  STATUSRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            STATUSDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            STATUSDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            STATUSDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  STATUS9Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  STATUS8Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  STATUS7Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  STATUS6Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  STATUS5Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  STATUS4Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  STATUS3Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  STATUS2Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  STATUS1Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  STATUS0Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  TODOLIST_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ToDoList::NewDataSet::STATUSRow^  default [::System::Int32 ] {
                ToDoList::NewDataSet::STATUSRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddSTATUSRow(ToDoList::NewDataSet::STATUSRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ToDoList::NewDataSet::STATUSRow^  AddSTATUSRow(
                        System::String^  STATUS9, 
                        System::String^  STATUS8, 
                        System::String^  STATUS7, 
                        System::String^  STATUS6, 
                        System::String^  STATUS5, 
                        System::String^  STATUS4, 
                        System::String^  STATUS3, 
                        System::String^  STATUS2, 
                        System::String^  STATUS1, 
                        System::String^  STATUS0, 
                        ToDoList::NewDataSet::TODOLISTRow^  parentTODOLISTRowByTODOLIST_STATUS);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ToDoList::NewDataSet::STATUSRow^  NewSTATUSRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveSTATUSRow(ToDoList::NewDataSet::STATUSRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class PERSONDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnPERSON9;
            
            private: ::System::Data::DataColumn^  columnPERSON8;
            
            private: ::System::Data::DataColumn^  columnPERSON7;
            
            private: ::System::Data::DataColumn^  columnPERSON6;
            
            private: ::System::Data::DataColumn^  columnPERSON5;
            
            private: ::System::Data::DataColumn^  columnPERSON4;
            
            private: ::System::Data::DataColumn^  columnPERSON3;
            
            private: ::System::Data::DataColumn^  columnPERSON2;
            
            private: ::System::Data::DataColumn^  columnPERSON1;
            
            private: ::System::Data::DataColumn^  columnPERSON0;
            
            private: ::System::Data::DataColumn^  columnTODOLIST_Id;
            
            public: event ToDoList::NewDataSet::PERSONRowChangeEventHandler^  PERSONRowChanging;
            
            public: event ToDoList::NewDataSet::PERSONRowChangeEventHandler^  PERSONRowChanged;
            
            public: event ToDoList::NewDataSet::PERSONRowChangeEventHandler^  PERSONRowDeleting;
            
            public: event ToDoList::NewDataSet::PERSONRowChangeEventHandler^  PERSONRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            PERSONDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            PERSONDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            PERSONDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  PERSON9Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  PERSON8Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  PERSON7Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  PERSON6Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  PERSON5Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  PERSON4Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  PERSON3Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  PERSON2Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  PERSON1Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  PERSON0Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  TODOLIST_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ToDoList::NewDataSet::PERSONRow^  default [::System::Int32 ] {
                ToDoList::NewDataSet::PERSONRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddPERSONRow(ToDoList::NewDataSet::PERSONRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ToDoList::NewDataSet::PERSONRow^  AddPERSONRow(
                        System::String^  PERSON9, 
                        System::String^  PERSON8, 
                        System::String^  PERSON7, 
                        System::String^  PERSON6, 
                        System::String^  PERSON5, 
                        System::String^  PERSON4, 
                        System::String^  PERSON3, 
                        System::String^  PERSON2, 
                        System::String^  PERSON1, 
                        System::String^  PERSON0, 
                        ToDoList::NewDataSet::TODOLISTRow^  parentTODOLISTRowByTODOLIST_PERSON);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ToDoList::NewDataSet::PERSONRow^  NewPERSONRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemovePERSONRow(ToDoList::NewDataSet::PERSONRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class ALLOCATEDBYDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnALLOCATEDBY9;
            
            private: ::System::Data::DataColumn^  columnALLOCATEDBY8;
            
            private: ::System::Data::DataColumn^  columnALLOCATEDBY7;
            
            private: ::System::Data::DataColumn^  columnALLOCATEDBY6;
            
            private: ::System::Data::DataColumn^  columnALLOCATEDBY5;
            
            private: ::System::Data::DataColumn^  columnALLOCATEDBY4;
            
            private: ::System::Data::DataColumn^  columnALLOCATEDBY3;
            
            private: ::System::Data::DataColumn^  columnALLOCATEDBY2;
            
            private: ::System::Data::DataColumn^  columnALLOCATEDBY1;
            
            private: ::System::Data::DataColumn^  columnALLOCATEDBY0;
            
            private: ::System::Data::DataColumn^  columnTODOLIST_Id;
            
            public: event ToDoList::NewDataSet::ALLOCATEDBYRowChangeEventHandler^  ALLOCATEDBYRowChanging;
            
            public: event ToDoList::NewDataSet::ALLOCATEDBYRowChangeEventHandler^  ALLOCATEDBYRowChanged;
            
            public: event ToDoList::NewDataSet::ALLOCATEDBYRowChangeEventHandler^  ALLOCATEDBYRowDeleting;
            
            public: event ToDoList::NewDataSet::ALLOCATEDBYRowChangeEventHandler^  ALLOCATEDBYRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ALLOCATEDBYDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ALLOCATEDBYDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ALLOCATEDBYDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ALLOCATEDBY9Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ALLOCATEDBY8Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ALLOCATEDBY7Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ALLOCATEDBY6Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ALLOCATEDBY5Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ALLOCATEDBY4Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ALLOCATEDBY3Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ALLOCATEDBY2Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ALLOCATEDBY1Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ALLOCATEDBY0Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  TODOLIST_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ToDoList::NewDataSet::ALLOCATEDBYRow^  default [::System::Int32 ] {
                ToDoList::NewDataSet::ALLOCATEDBYRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddALLOCATEDBYRow(ToDoList::NewDataSet::ALLOCATEDBYRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ToDoList::NewDataSet::ALLOCATEDBYRow^  AddALLOCATEDBYRow(
                        System::String^  ALLOCATEDBY9, 
                        System::String^  ALLOCATEDBY8, 
                        System::String^  ALLOCATEDBY7, 
                        System::String^  ALLOCATEDBY6, 
                        System::String^  ALLOCATEDBY5, 
                        System::String^  ALLOCATEDBY4, 
                        System::String^  ALLOCATEDBY3, 
                        System::String^  ALLOCATEDBY2, 
                        System::String^  ALLOCATEDBY1, 
                        System::String^  ALLOCATEDBY0, 
                        ToDoList::NewDataSet::TODOLISTRow^  parentTODOLISTRowByTODOLIST_ALLOCATEDBY);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ToDoList::NewDataSet::ALLOCATEDBYRow^  NewALLOCATEDBYRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveALLOCATEDBYRow(ToDoList::NewDataSet::ALLOCATEDBYRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class VERSIONDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnVERSION9;
            
            private: ::System::Data::DataColumn^  columnVERSION8;
            
            private: ::System::Data::DataColumn^  columnVERSION7;
            
            private: ::System::Data::DataColumn^  columnVERSION6;
            
            private: ::System::Data::DataColumn^  columnVERSION5;
            
            private: ::System::Data::DataColumn^  columnVERSION4;
            
            private: ::System::Data::DataColumn^  columnVERSION3;
            
            private: ::System::Data::DataColumn^  columnVERSION2;
            
            private: ::System::Data::DataColumn^  columnVERSION1;
            
            private: ::System::Data::DataColumn^  columnVERSION0;
            
            private: ::System::Data::DataColumn^  columnTODOLIST_Id;
            
            public: event ToDoList::NewDataSet::VERSIONRowChangeEventHandler^  VERSIONRowChanging;
            
            public: event ToDoList::NewDataSet::VERSIONRowChangeEventHandler^  VERSIONRowChanged;
            
            public: event ToDoList::NewDataSet::VERSIONRowChangeEventHandler^  VERSIONRowDeleting;
            
            public: event ToDoList::NewDataSet::VERSIONRowChangeEventHandler^  VERSIONRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            VERSIONDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            VERSIONDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            VERSIONDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  VERSION9Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  VERSION8Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  VERSION7Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  VERSION6Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  VERSION5Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  VERSION4Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  VERSION3Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  VERSION2Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  VERSION1Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  VERSION0Column {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  TODOLIST_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ToDoList::NewDataSet::VERSIONRow^  default [::System::Int32 ] {
                ToDoList::NewDataSet::VERSIONRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddVERSIONRow(ToDoList::NewDataSet::VERSIONRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ToDoList::NewDataSet::VERSIONRow^  AddVERSIONRow(
                        System::String^  VERSION9, 
                        System::String^  VERSION8, 
                        System::String^  VERSION7, 
                        System::String^  VERSION6, 
                        System::String^  VERSION5, 
                        System::String^  VERSION4, 
                        System::String^  VERSION3, 
                        System::String^  VERSION2, 
                        System::String^  VERSION1, 
                        System::String^  VERSION0, 
                        ToDoList::NewDataSet::TODOLISTRow^  parentTODOLISTRowByTODOLIST_VERSION);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ToDoList::NewDataSet::VERSIONRow^  NewVERSIONRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveVERSIONRow(ToDoList::NewDataSet::VERSIONRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class TODOLISTRow : public ::System::Data::DataRow {
            
            private: ToDoList::NewDataSet::TODOLISTDataTable^  tableTODOLIST;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TODOLISTRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  CUSTOMCOMMENTSTYPE {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  PROJECTNAME {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  NEXTUNIQUEID {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  LASTMODIFIED {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  FILEVERSION {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  FILENAME {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  FILEFORMAT {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  EARLIESTDUEDATE {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 TODOLIST_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsCUSTOMCOMMENTSTYPENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetCUSTOMCOMMENTSTYPENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsPROJECTNAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetPROJECTNAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsNEXTUNIQUEIDNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetNEXTUNIQUEIDNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsLASTMODIFIEDNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetLASTMODIFIEDNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsFILEVERSIONNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetFILEVERSIONNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsFILENAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetFILENAMENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsFILEFORMATNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetFILEFORMATNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsEARLIESTDUEDATENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetEARLIESTDUEDATENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< ToDoList::NewDataSet::TASKRow^  >^  GetTASKRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< ToDoList::NewDataSet::CATEGORYRow^  >^  GetCATEGORYRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< ToDoList::NewDataSet::STATUSRow^  >^  GetSTATUSRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< ToDoList::NewDataSet::PERSONRow^  >^  GetPERSONRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< ToDoList::NewDataSet::ALLOCATEDBYRow^  >^  GetALLOCATEDBYRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< ToDoList::NewDataSet::VERSIONRow^  >^  GetVERSIONRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class TASKRow : public ::System::Data::DataRow {
            
            private: ToDoList::NewDataSet::TASKDataTable^  tableTASK;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TASKRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  ALLOCATEDBY {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  CALCCOST {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  CALCPERCENTDONE {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  CALCTIMEESTIMATE {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  CALCTIMESPENT {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  CATEGORY {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  CATEGORY1 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  CATEGORY2 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  CATEGORY3 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  CATEGORY4 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  CATEGORY5 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  CATEGORY6 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  CATEGORY7 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  CATEGORY8 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  CATEGORY9 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  COLOR {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  COMMENTS {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  COMMENTSTYPE {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  COST {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  CREATIONDATE {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  CREATIONDATESTRING {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  CUSTOMCOMMENTS {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  DEPENDS {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  DEPENDS1 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  DEPENDS2 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  DEPENDS3 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  DEPENDS4 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  DEPENDS5 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  DEPENDS6 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  DEPENDS7 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  DEPENDS8 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  DEPENDS9 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  DONEDATE {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  DONEDATESTRING {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  DUEDATE {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  DUEDATESTRING {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  EXTERNALID {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  FILEREFPATH {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  FLAG {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  ICONINDEX {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  ID {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  LASTMOD {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  LASTMODSTRING {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  NUMCATEGORY {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  NUMDEPENDS {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  NUMPERSON {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  PERCENTDONE {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  PERSON {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  PERSON1 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  PERSON2 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  PERSON3 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  PERSON4 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  PERSON5 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  PERSON6 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  PERSON7 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  PERSON8 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  PERSON9 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  POS {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  PRIORITY {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  PRIORITYCOLOR {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  PRIORITYWEBCOLOR {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  RISK {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  STARTDATE {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  STARTDATESTRING {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  STATUS {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  TEXTCOLOR {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  TEXTWEBCOLOR {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  TIMEESTIMATE {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  TIMEESTUNITS {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  TIMESPENT {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  TIMESPENTUNITS {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  TITLE {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  VERSION {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  WEBCOLOR {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 TODOLIST_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ToDoList::NewDataSet::TODOLISTRow^  TODOLISTRow {
                ToDoList::NewDataSet::TODOLISTRow^  get();
                System::Void set(ToDoList::NewDataSet::TODOLISTRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsALLOCATEDBYNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetALLOCATEDBYNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsCALCCOSTNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetCALCCOSTNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsCALCPERCENTDONENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetCALCPERCENTDONENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsCALCTIMEESTIMATENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetCALCTIMEESTIMATENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsCALCTIMESPENTNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetCALCTIMESPENTNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsCATEGORYNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetCATEGORYNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsCATEGORY1Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetCATEGORY1Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsCATEGORY2Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetCATEGORY2Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsCATEGORY3Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetCATEGORY3Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsCATEGORY4Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetCATEGORY4Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsCATEGORY5Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetCATEGORY5Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsCATEGORY6Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetCATEGORY6Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsCATEGORY7Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetCATEGORY7Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsCATEGORY8Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetCATEGORY8Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsCATEGORY9Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetCATEGORY9Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsCOLORNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetCOLORNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsCOMMENTSNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetCOMMENTSNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsCOMMENTSTYPENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetCOMMENTSTYPENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsCOSTNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetCOSTNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsCREATIONDATENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetCREATIONDATENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsCREATIONDATESTRINGNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetCREATIONDATESTRINGNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsCUSTOMCOMMENTSNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetCUSTOMCOMMENTSNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsDEPENDSNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetDEPENDSNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsDEPENDS1Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetDEPENDS1Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsDEPENDS2Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetDEPENDS2Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsDEPENDS3Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetDEPENDS3Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsDEPENDS4Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetDEPENDS4Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsDEPENDS5Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetDEPENDS5Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsDEPENDS6Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetDEPENDS6Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsDEPENDS7Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetDEPENDS7Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsDEPENDS8Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetDEPENDS8Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsDEPENDS9Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetDEPENDS9Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsDONEDATENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetDONEDATENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsDONEDATESTRINGNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetDONEDATESTRINGNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsDUEDATENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetDUEDATENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsDUEDATESTRINGNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetDUEDATESTRINGNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsEXTERNALIDNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetEXTERNALIDNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsFILEREFPATHNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetFILEREFPATHNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsFLAGNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetFLAGNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsICONINDEXNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetICONINDEXNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsIDNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetIDNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsLASTMODNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetLASTMODNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsLASTMODSTRINGNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetLASTMODSTRINGNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsNUMCATEGORYNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetNUMCATEGORYNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsNUMDEPENDSNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetNUMDEPENDSNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsNUMPERSONNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetNUMPERSONNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsPERCENTDONENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetPERCENTDONENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsPERSONNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetPERSONNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsPERSON1Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetPERSON1Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsPERSON2Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetPERSON2Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsPERSON3Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetPERSON3Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsPERSON4Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetPERSON4Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsPERSON5Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetPERSON5Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsPERSON6Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetPERSON6Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsPERSON7Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetPERSON7Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsPERSON8Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetPERSON8Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsPERSON9Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetPERSON9Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsPOSNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetPOSNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsPRIORITYNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetPRIORITYNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsPRIORITYCOLORNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetPRIORITYCOLORNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsPRIORITYWEBCOLORNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetPRIORITYWEBCOLORNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsRISKNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetRISKNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsSTARTDATENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetSTARTDATENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsSTARTDATESTRINGNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetSTARTDATESTRINGNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsSTATUSNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetSTATUSNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsTEXTCOLORNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetTEXTCOLORNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsTEXTWEBCOLORNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetTEXTWEBCOLORNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsTIMEESTIMATENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetTIMEESTIMATENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsTIMEESTUNITSNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetTIMEESTUNITSNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsTIMESPENTNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetTIMESPENTNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsTIMESPENTUNITSNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetTIMESPENTUNITSNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsTITLENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetTITLENull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsVERSIONNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetVERSIONNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsWEBCOLORNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetWEBCOLORNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsTODOLIST_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetTODOLIST_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class CATEGORYRow : public ::System::Data::DataRow {
            
            private: ToDoList::NewDataSet::CATEGORYDataTable^  tableCATEGORY;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            CATEGORYRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  CATEGORY9 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  CATEGORY8 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  CATEGORY7 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  CATEGORY6 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  CATEGORY5 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  CATEGORY4 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  CATEGORY3 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  CATEGORY2 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  CATEGORY1 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  CATEGORY0 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 TODOLIST_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ToDoList::NewDataSet::TODOLISTRow^  TODOLISTRow {
                ToDoList::NewDataSet::TODOLISTRow^  get();
                System::Void set(ToDoList::NewDataSet::TODOLISTRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsCATEGORY9Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetCATEGORY9Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsCATEGORY8Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetCATEGORY8Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsCATEGORY7Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetCATEGORY7Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsCATEGORY6Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetCATEGORY6Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsCATEGORY5Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetCATEGORY5Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsCATEGORY4Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetCATEGORY4Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsCATEGORY3Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetCATEGORY3Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsCATEGORY2Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetCATEGORY2Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsCATEGORY1Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetCATEGORY1Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsTODOLIST_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetTODOLIST_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class STATUSRow : public ::System::Data::DataRow {
            
            private: ToDoList::NewDataSet::STATUSDataTable^  tableSTATUS;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            STATUSRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  STATUS9 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  STATUS8 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  STATUS7 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  STATUS6 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  STATUS5 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  STATUS4 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  STATUS3 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  STATUS2 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  STATUS1 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  STATUS0 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 TODOLIST_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ToDoList::NewDataSet::TODOLISTRow^  TODOLISTRow {
                ToDoList::NewDataSet::TODOLISTRow^  get();
                System::Void set(ToDoList::NewDataSet::TODOLISTRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsSTATUS9Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetSTATUS9Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsSTATUS8Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetSTATUS8Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsSTATUS7Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetSTATUS7Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsSTATUS6Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetSTATUS6Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsSTATUS5Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetSTATUS5Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsSTATUS4Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetSTATUS4Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsSTATUS3Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetSTATUS3Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsSTATUS2Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetSTATUS2Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsSTATUS1Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetSTATUS1Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsTODOLIST_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetTODOLIST_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class PERSONRow : public ::System::Data::DataRow {
            
            private: ToDoList::NewDataSet::PERSONDataTable^  tablePERSON;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            PERSONRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  PERSON9 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  PERSON8 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  PERSON7 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  PERSON6 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  PERSON5 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  PERSON4 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  PERSON3 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  PERSON2 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  PERSON1 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  PERSON0 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 TODOLIST_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ToDoList::NewDataSet::TODOLISTRow^  TODOLISTRow {
                ToDoList::NewDataSet::TODOLISTRow^  get();
                System::Void set(ToDoList::NewDataSet::TODOLISTRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsPERSON9Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetPERSON9Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsPERSON8Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetPERSON8Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsPERSON7Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetPERSON7Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsPERSON6Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetPERSON6Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsPERSON5Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetPERSON5Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsPERSON4Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetPERSON4Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsPERSON3Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetPERSON3Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsPERSON2Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetPERSON2Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsPERSON1Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetPERSON1Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsTODOLIST_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetTODOLIST_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class ALLOCATEDBYRow : public ::System::Data::DataRow {
            
            private: ToDoList::NewDataSet::ALLOCATEDBYDataTable^  tableALLOCATEDBY;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ALLOCATEDBYRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  ALLOCATEDBY9 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  ALLOCATEDBY8 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  ALLOCATEDBY7 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  ALLOCATEDBY6 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  ALLOCATEDBY5 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  ALLOCATEDBY4 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  ALLOCATEDBY3 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  ALLOCATEDBY2 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  ALLOCATEDBY1 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  ALLOCATEDBY0 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 TODOLIST_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ToDoList::NewDataSet::TODOLISTRow^  TODOLISTRow {
                ToDoList::NewDataSet::TODOLISTRow^  get();
                System::Void set(ToDoList::NewDataSet::TODOLISTRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsALLOCATEDBY9Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetALLOCATEDBY9Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsALLOCATEDBY8Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetALLOCATEDBY8Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsALLOCATEDBY7Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetALLOCATEDBY7Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsALLOCATEDBY6Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetALLOCATEDBY6Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsALLOCATEDBY5Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetALLOCATEDBY5Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsALLOCATEDBY4Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetALLOCATEDBY4Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsALLOCATEDBY3Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetALLOCATEDBY3Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsALLOCATEDBY2Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetALLOCATEDBY2Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsALLOCATEDBY1Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetALLOCATEDBY1Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsTODOLIST_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetTODOLIST_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class VERSIONRow : public ::System::Data::DataRow {
            
            private: ToDoList::NewDataSet::VERSIONDataTable^  tableVERSION;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            VERSIONRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  VERSION9 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  VERSION8 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  VERSION7 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  VERSION6 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  VERSION5 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  VERSION4 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  VERSION3 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  VERSION2 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  VERSION1 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  VERSION0 {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 TODOLIST_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ToDoList::NewDataSet::TODOLISTRow^  TODOLISTRow {
                ToDoList::NewDataSet::TODOLISTRow^  get();
                System::Void set(ToDoList::NewDataSet::TODOLISTRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsVERSION9Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetVERSION9Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsVERSION8Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetVERSION8Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsVERSION7Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetVERSION7Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsVERSION6Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetVERSION6Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsVERSION5Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetVERSION5Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsVERSION4Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetVERSION4Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsVERSION3Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetVERSION3Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsVERSION2Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetVERSION2Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsVERSION1Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetVERSION1Null();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsTODOLIST_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetTODOLIST_IdNull();
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class TODOLISTRowChangeEvent : public ::System::EventArgs {
            
            private: ToDoList::NewDataSet::TODOLISTRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TODOLISTRowChangeEvent(ToDoList::NewDataSet::TODOLISTRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ToDoList::NewDataSet::TODOLISTRow^  Row {
                ToDoList::NewDataSet::TODOLISTRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class TASKRowChangeEvent : public ::System::EventArgs {
            
            private: ToDoList::NewDataSet::TASKRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            TASKRowChangeEvent(ToDoList::NewDataSet::TASKRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ToDoList::NewDataSet::TASKRow^  Row {
                ToDoList::NewDataSet::TASKRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class CATEGORYRowChangeEvent : public ::System::EventArgs {
            
            private: ToDoList::NewDataSet::CATEGORYRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            CATEGORYRowChangeEvent(ToDoList::NewDataSet::CATEGORYRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ToDoList::NewDataSet::CATEGORYRow^  Row {
                ToDoList::NewDataSet::CATEGORYRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class STATUSRowChangeEvent : public ::System::EventArgs {
            
            private: ToDoList::NewDataSet::STATUSRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            STATUSRowChangeEvent(ToDoList::NewDataSet::STATUSRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ToDoList::NewDataSet::STATUSRow^  Row {
                ToDoList::NewDataSet::STATUSRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class PERSONRowChangeEvent : public ::System::EventArgs {
            
            private: ToDoList::NewDataSet::PERSONRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            PERSONRowChangeEvent(ToDoList::NewDataSet::PERSONRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ToDoList::NewDataSet::PERSONRow^  Row {
                ToDoList::NewDataSet::PERSONRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class ALLOCATEDBYRowChangeEvent : public ::System::EventArgs {
            
            private: ToDoList::NewDataSet::ALLOCATEDBYRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ALLOCATEDBYRowChangeEvent(ToDoList::NewDataSet::ALLOCATEDBYRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ToDoList::NewDataSet::ALLOCATEDBYRow^  Row {
                ToDoList::NewDataSet::ALLOCATEDBYRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class VERSIONRowChangeEvent : public ::System::EventArgs {
            
            private: ToDoList::NewDataSet::VERSIONRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            VERSIONRowChangeEvent(ToDoList::NewDataSet::VERSIONRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ToDoList::NewDataSet::VERSIONRow^  Row {
                ToDoList::NewDataSet::VERSIONRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
    };
}
namespace ToDoList {
    
    
    inline NewDataSet::NewDataSet() {
        this->BeginInit();
        this->InitClass();
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &ToDoList::NewDataSet::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        __super::Relations->CollectionChanged += schemaChangedHandler;
        this->EndInit();
    }
    
    inline NewDataSet::NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataSet(info, context, false) {
        if (this->IsBinarySerialized(info, context) == true) {
            this->InitVars(false);
            ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler1 = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &ToDoList::NewDataSet::SchemaChanged);
            this->Tables->CollectionChanged += schemaChangedHandler1;
            this->Relations->CollectionChanged += schemaChangedHandler1;
            return;
        }
        ::System::String^  strSchema = (cli::safe_cast<::System::String^  >(info->GetValue(L"XmlSchema", ::System::String::typeid)));
        if (this->DetermineSchemaSerializationMode(info, context) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
            if (ds->Tables[L"TODOLIST"] != nullptr) {
                __super::Tables->Add((gcnew ToDoList::NewDataSet::TODOLISTDataTable(ds->Tables[L"TODOLIST"])));
            }
            if (ds->Tables[L"TASK"] != nullptr) {
                __super::Tables->Add((gcnew ToDoList::NewDataSet::TASKDataTable(ds->Tables[L"TASK"])));
            }
            if (ds->Tables[L"CATEGORY"] != nullptr) {
                __super::Tables->Add((gcnew ToDoList::NewDataSet::CATEGORYDataTable(ds->Tables[L"CATEGORY"])));
            }
            if (ds->Tables[L"STATUS"] != nullptr) {
                __super::Tables->Add((gcnew ToDoList::NewDataSet::STATUSDataTable(ds->Tables[L"STATUS"])));
            }
            if (ds->Tables[L"PERSON"] != nullptr) {
                __super::Tables->Add((gcnew ToDoList::NewDataSet::PERSONDataTable(ds->Tables[L"PERSON"])));
            }
            if (ds->Tables[L"ALLOCATEDBY"] != nullptr) {
                __super::Tables->Add((gcnew ToDoList::NewDataSet::ALLOCATEDBYDataTable(ds->Tables[L"ALLOCATEDBY"])));
            }
            if (ds->Tables[L"VERSION"] != nullptr) {
                __super::Tables->Add((gcnew ToDoList::NewDataSet::VERSIONDataTable(ds->Tables[L"VERSION"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
        }
        this->GetSerializationData(info, context);
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &ToDoList::NewDataSet::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        this->Relations->CollectionChanged += schemaChangedHandler;
    }
    
    inline ToDoList::NewDataSet::TODOLISTDataTable^  NewDataSet::TODOLIST::get() {
        return this->tableTODOLIST;
    }
    
    inline ToDoList::NewDataSet::TASKDataTable^  NewDataSet::TASK::get() {
        return this->tableTASK;
    }
    
    inline ToDoList::NewDataSet::CATEGORYDataTable^  NewDataSet::CATEGORY::get() {
        return this->tableCATEGORY;
    }
    
    inline ToDoList::NewDataSet::STATUSDataTable^  NewDataSet::STATUS::get() {
        return this->tableSTATUS;
    }
    
    inline ToDoList::NewDataSet::PERSONDataTable^  NewDataSet::PERSON::get() {
        return this->tablePERSON;
    }
    
    inline ToDoList::NewDataSet::ALLOCATEDBYDataTable^  NewDataSet::ALLOCATEDBY::get() {
        return this->tableALLOCATEDBY;
    }
    
    inline ToDoList::NewDataSet::VERSIONDataTable^  NewDataSet::VERSION::get() {
        return this->tableVERSION;
    }
    
    inline ::System::Data::SchemaSerializationMode NewDataSet::SchemaSerializationMode::get() {
        return this->_schemaSerializationMode;
    }
    inline System::Void NewDataSet::SchemaSerializationMode::set(::System::Data::SchemaSerializationMode value) {
        this->_schemaSerializationMode = __identifier(value);
    }
    
    inline ::System::Data::DataTableCollection^  NewDataSet::Tables::get() {
        return __super::Tables;
    }
    
    inline ::System::Data::DataRelationCollection^  NewDataSet::Relations::get() {
        return __super::Relations;
    }
    
    inline ::System::Void NewDataSet::InitializeDerivedDataSet() {
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline ::System::Data::DataSet^  NewDataSet::Clone() {
        ToDoList::NewDataSet^  cln = (cli::safe_cast<ToDoList::NewDataSet^  >(__super::Clone()));
        cln->InitVars();
        cln->SchemaSerializationMode = this->SchemaSerializationMode;
        return cln;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeTables() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeRelations() {
        return false;
    }
    
    inline ::System::Void NewDataSet::ReadXmlSerializable(::System::Xml::XmlReader^  reader) {
        if (this->DetermineSchemaSerializationMode(reader) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            this->Reset();
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXml(reader);
            if (ds->Tables[L"TODOLIST"] != nullptr) {
                __super::Tables->Add((gcnew ToDoList::NewDataSet::TODOLISTDataTable(ds->Tables[L"TODOLIST"])));
            }
            if (ds->Tables[L"TASK"] != nullptr) {
                __super::Tables->Add((gcnew ToDoList::NewDataSet::TASKDataTable(ds->Tables[L"TASK"])));
            }
            if (ds->Tables[L"CATEGORY"] != nullptr) {
                __super::Tables->Add((gcnew ToDoList::NewDataSet::CATEGORYDataTable(ds->Tables[L"CATEGORY"])));
            }
            if (ds->Tables[L"STATUS"] != nullptr) {
                __super::Tables->Add((gcnew ToDoList::NewDataSet::STATUSDataTable(ds->Tables[L"STATUS"])));
            }
            if (ds->Tables[L"PERSON"] != nullptr) {
                __super::Tables->Add((gcnew ToDoList::NewDataSet::PERSONDataTable(ds->Tables[L"PERSON"])));
            }
            if (ds->Tables[L"ALLOCATEDBY"] != nullptr) {
                __super::Tables->Add((gcnew ToDoList::NewDataSet::ALLOCATEDBYDataTable(ds->Tables[L"ALLOCATEDBY"])));
            }
            if (ds->Tables[L"VERSION"] != nullptr) {
                __super::Tables->Add((gcnew ToDoList::NewDataSet::VERSIONDataTable(ds->Tables[L"VERSION"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXml(reader);
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchema^  NewDataSet::GetSchemaSerializable() {
        ::System::IO::MemoryStream^  stream = (gcnew ::System::IO::MemoryStream());
        this->WriteXmlSchema((gcnew ::System::Xml::XmlTextWriter(stream, nullptr)));
        stream->Position = 0;
        return ::System::Xml::Schema::XmlSchema::Read((gcnew ::System::Xml::XmlTextReader(stream)), nullptr);
    }
    
    inline ::System::Void NewDataSet::InitVars() {
        this->InitVars(true);
    }
    
    inline ::System::Void NewDataSet::InitVars(::System::Boolean initTable) {
        this->tableTODOLIST = (cli::safe_cast<ToDoList::NewDataSet::TODOLISTDataTable^  >(__super::Tables[L"TODOLIST"]));
        if (initTable == true) {
            if (this->tableTODOLIST != nullptr) {
                this->tableTODOLIST->InitVars();
            }
        }
        this->tableTASK = (cli::safe_cast<ToDoList::NewDataSet::TASKDataTable^  >(__super::Tables[L"TASK"]));
        if (initTable == true) {
            if (this->tableTASK != nullptr) {
                this->tableTASK->InitVars();
            }
        }
        this->tableCATEGORY = (cli::safe_cast<ToDoList::NewDataSet::CATEGORYDataTable^  >(__super::Tables[L"CATEGORY"]));
        if (initTable == true) {
            if (this->tableCATEGORY != nullptr) {
                this->tableCATEGORY->InitVars();
            }
        }
        this->tableSTATUS = (cli::safe_cast<ToDoList::NewDataSet::STATUSDataTable^  >(__super::Tables[L"STATUS"]));
        if (initTable == true) {
            if (this->tableSTATUS != nullptr) {
                this->tableSTATUS->InitVars();
            }
        }
        this->tablePERSON = (cli::safe_cast<ToDoList::NewDataSet::PERSONDataTable^  >(__super::Tables[L"PERSON"]));
        if (initTable == true) {
            if (this->tablePERSON != nullptr) {
                this->tablePERSON->InitVars();
            }
        }
        this->tableALLOCATEDBY = (cli::safe_cast<ToDoList::NewDataSet::ALLOCATEDBYDataTable^  >(__super::Tables[L"ALLOCATEDBY"]));
        if (initTable == true) {
            if (this->tableALLOCATEDBY != nullptr) {
                this->tableALLOCATEDBY->InitVars();
            }
        }
        this->tableVERSION = (cli::safe_cast<ToDoList::NewDataSet::VERSIONDataTable^  >(__super::Tables[L"VERSION"]));
        if (initTable == true) {
            if (this->tableVERSION != nullptr) {
                this->tableVERSION->InitVars();
            }
        }
        this->relationTODOLIST_TASK = this->Relations[L"TODOLIST_TASK"];
        this->relationTODOLIST_CATEGORY = this->Relations[L"TODOLIST_CATEGORY"];
        this->relationTODOLIST_STATUS = this->Relations[L"TODOLIST_STATUS"];
        this->relationTODOLIST_PERSON = this->Relations[L"TODOLIST_PERSON"];
        this->relationTODOLIST_ALLOCATEDBY = this->Relations[L"TODOLIST_ALLOCATEDBY"];
        this->relationTODOLIST_VERSION = this->Relations[L"TODOLIST_VERSION"];
    }
    
    inline ::System::Void NewDataSet::InitClass() {
        this->DataSetName = L"NewDataSet";
        this->Prefix = L"";
        this->Locale = (gcnew ::System::Globalization::CultureInfo(L""));
        this->EnforceConstraints = true;
        this->SchemaSerializationMode = ::System::Data::SchemaSerializationMode::IncludeSchema;
        this->tableTODOLIST = (gcnew ToDoList::NewDataSet::TODOLISTDataTable());
        __super::Tables->Add(this->tableTODOLIST);
        this->tableTASK = (gcnew ToDoList::NewDataSet::TASKDataTable());
        __super::Tables->Add(this->tableTASK);
        this->tableCATEGORY = (gcnew ToDoList::NewDataSet::CATEGORYDataTable());
        __super::Tables->Add(this->tableCATEGORY);
        this->tableSTATUS = (gcnew ToDoList::NewDataSet::STATUSDataTable());
        __super::Tables->Add(this->tableSTATUS);
        this->tablePERSON = (gcnew ToDoList::NewDataSet::PERSONDataTable());
        __super::Tables->Add(this->tablePERSON);
        this->tableALLOCATEDBY = (gcnew ToDoList::NewDataSet::ALLOCATEDBYDataTable());
        __super::Tables->Add(this->tableALLOCATEDBY);
        this->tableVERSION = (gcnew ToDoList::NewDataSet::VERSIONDataTable());
        __super::Tables->Add(this->tableVERSION);
        ::System::Data::ForeignKeyConstraint^  fkc;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"TODOLIST_TASK", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTODOLIST->TODOLIST_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTASK->TODOLIST_IdColumn}));
        this->tableTASK->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"TODOLIST_CATEGORY", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTODOLIST->TODOLIST_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCATEGORY->TODOLIST_IdColumn}));
        this->tableCATEGORY->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"TODOLIST_STATUS", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTODOLIST->TODOLIST_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableSTATUS->TODOLIST_IdColumn}));
        this->tableSTATUS->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"TODOLIST_PERSON", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTODOLIST->TODOLIST_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePERSON->TODOLIST_IdColumn}));
        this->tablePERSON->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"TODOLIST_ALLOCATEDBY", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTODOLIST->TODOLIST_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableALLOCATEDBY->TODOLIST_IdColumn}));
        this->tableALLOCATEDBY->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"TODOLIST_VERSION", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTODOLIST->TODOLIST_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVERSION->TODOLIST_IdColumn}));
        this->tableVERSION->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        this->relationTODOLIST_TASK = (gcnew ::System::Data::DataRelation(L"TODOLIST_TASK", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTODOLIST->TODOLIST_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTASK->TODOLIST_IdColumn}, false));
        this->relationTODOLIST_TASK->Nested = true;
        this->Relations->Add(this->relationTODOLIST_TASK);
        this->relationTODOLIST_CATEGORY = (gcnew ::System::Data::DataRelation(L"TODOLIST_CATEGORY", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTODOLIST->TODOLIST_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCATEGORY->TODOLIST_IdColumn}, false));
        this->relationTODOLIST_CATEGORY->Nested = true;
        this->Relations->Add(this->relationTODOLIST_CATEGORY);
        this->relationTODOLIST_STATUS = (gcnew ::System::Data::DataRelation(L"TODOLIST_STATUS", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTODOLIST->TODOLIST_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableSTATUS->TODOLIST_IdColumn}, false));
        this->relationTODOLIST_STATUS->Nested = true;
        this->Relations->Add(this->relationTODOLIST_STATUS);
        this->relationTODOLIST_PERSON = (gcnew ::System::Data::DataRelation(L"TODOLIST_PERSON", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTODOLIST->TODOLIST_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePERSON->TODOLIST_IdColumn}, false));
        this->relationTODOLIST_PERSON->Nested = true;
        this->Relations->Add(this->relationTODOLIST_PERSON);
        this->relationTODOLIST_ALLOCATEDBY = (gcnew ::System::Data::DataRelation(L"TODOLIST_ALLOCATEDBY", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTODOLIST->TODOLIST_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableALLOCATEDBY->TODOLIST_IdColumn}, false));
        this->relationTODOLIST_ALLOCATEDBY->Nested = true;
        this->Relations->Add(this->relationTODOLIST_ALLOCATEDBY);
        this->relationTODOLIST_VERSION = (gcnew ::System::Data::DataRelation(L"TODOLIST_VERSION", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTODOLIST->TODOLIST_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVERSION->TODOLIST_IdColumn}, false));
        this->relationTODOLIST_VERSION->Nested = true;
        this->Relations->Add(this->relationTODOLIST_VERSION);
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeTODOLIST() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeTASK() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeCATEGORY() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeSTATUS() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializePERSON() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeALLOCATEDBY() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeVERSION() {
        return false;
    }
    
    inline ::System::Void NewDataSet::SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e) {
        if (e->Action == ::System::ComponentModel::CollectionChangeAction::Remove) {
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ToDoList::NewDataSet^  ds = (gcnew ToDoList::NewDataSet());
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        ::System::Xml::Schema::XmlSchemaAny^  any = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any->Namespace = ds->Namespace;
        sequence->Items->Add(any);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::TODOLISTDataTable::TODOLISTDataTable() {
        this->TableName = L"TODOLIST";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::TODOLISTDataTable::TODOLISTDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::TODOLISTDataTable::TODOLISTDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TODOLISTDataTable::CUSTOMCOMMENTSTYPEColumn::get() {
        return this->columnCUSTOMCOMMENTSTYPE;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TODOLISTDataTable::PROJECTNAMEColumn::get() {
        return this->columnPROJECTNAME;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TODOLISTDataTable::NEXTUNIQUEIDColumn::get() {
        return this->columnNEXTUNIQUEID;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TODOLISTDataTable::LASTMODIFIEDColumn::get() {
        return this->columnLASTMODIFIED;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TODOLISTDataTable::FILEVERSIONColumn::get() {
        return this->columnFILEVERSION;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TODOLISTDataTable::FILENAMEColumn::get() {
        return this->columnFILENAME;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TODOLISTDataTable::FILEFORMATColumn::get() {
        return this->columnFILEFORMAT;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TODOLISTDataTable::EARLIESTDUEDATEColumn::get() {
        return this->columnEARLIESTDUEDATE;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TODOLISTDataTable::TODOLIST_IdColumn::get() {
        return this->columnTODOLIST_Id;
    }
    
    inline ::System::Int32 NewDataSet::TODOLISTDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline ToDoList::NewDataSet::TODOLISTRow^  NewDataSet::TODOLISTDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<ToDoList::NewDataSet::TODOLISTRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::TODOLISTDataTable::AddTODOLISTRow(ToDoList::NewDataSet::TODOLISTRow^  row) {
        this->Rows->Add(row);
    }
    
    inline ToDoList::NewDataSet::TODOLISTRow^  NewDataSet::TODOLISTDataTable::AddTODOLISTRow(
                System::String^  CUSTOMCOMMENTSTYPE, 
                System::String^  PROJECTNAME, 
                System::String^  NEXTUNIQUEID, 
                System::String^  LASTMODIFIED, 
                System::String^  FILEVERSION, 
                System::String^  FILENAME, 
                System::String^  FILEFORMAT, 
                System::String^  EARLIESTDUEDATE) {
        ToDoList::NewDataSet::TODOLISTRow^  rowTODOLISTRow = (cli::safe_cast<ToDoList::NewDataSet::TODOLISTRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(9) {CUSTOMCOMMENTSTYPE, 
            PROJECTNAME, NEXTUNIQUEID, LASTMODIFIED, FILEVERSION, FILENAME, FILEFORMAT, EARLIESTDUEDATE, nullptr};
        rowTODOLISTRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowTODOLISTRow);
        return rowTODOLISTRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::TODOLISTDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::TODOLISTDataTable::Clone() {
        ToDoList::NewDataSet::TODOLISTDataTable^  cln = (cli::safe_cast<ToDoList::NewDataSet::TODOLISTDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::TODOLISTDataTable::CreateInstance() {
        return (gcnew ToDoList::NewDataSet::TODOLISTDataTable());
    }
    
    inline ::System::Void NewDataSet::TODOLISTDataTable::InitVars() {
        this->columnCUSTOMCOMMENTSTYPE = __super::Columns[L"CUSTOMCOMMENTSTYPE"];
        this->columnPROJECTNAME = __super::Columns[L"PROJECTNAME"];
        this->columnNEXTUNIQUEID = __super::Columns[L"NEXTUNIQUEID"];
        this->columnLASTMODIFIED = __super::Columns[L"LASTMODIFIED"];
        this->columnFILEVERSION = __super::Columns[L"FILEVERSION"];
        this->columnFILENAME = __super::Columns[L"FILENAME"];
        this->columnFILEFORMAT = __super::Columns[L"FILEFORMAT"];
        this->columnEARLIESTDUEDATE = __super::Columns[L"EARLIESTDUEDATE"];
        this->columnTODOLIST_Id = __super::Columns[L"TODOLIST_Id"];
    }
    
    inline ::System::Void NewDataSet::TODOLISTDataTable::InitClass() {
        this->columnCUSTOMCOMMENTSTYPE = (gcnew ::System::Data::DataColumn(L"CUSTOMCOMMENTSTYPE", ::System::String::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnCUSTOMCOMMENTSTYPE);
        this->columnPROJECTNAME = (gcnew ::System::Data::DataColumn(L"PROJECTNAME", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnPROJECTNAME);
        this->columnNEXTUNIQUEID = (gcnew ::System::Data::DataColumn(L"NEXTUNIQUEID", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnNEXTUNIQUEID);
        this->columnLASTMODIFIED = (gcnew ::System::Data::DataColumn(L"LASTMODIFIED", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnLASTMODIFIED);
        this->columnFILEVERSION = (gcnew ::System::Data::DataColumn(L"FILEVERSION", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnFILEVERSION);
        this->columnFILENAME = (gcnew ::System::Data::DataColumn(L"FILENAME", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnFILENAME);
        this->columnFILEFORMAT = (gcnew ::System::Data::DataColumn(L"FILEFORMAT", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnFILEFORMAT);
        this->columnEARLIESTDUEDATE = (gcnew ::System::Data::DataColumn(L"EARLIESTDUEDATE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnEARLIESTDUEDATE);
        this->columnTODOLIST_Id = (gcnew ::System::Data::DataColumn(L"TODOLIST_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnTODOLIST_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnTODOLIST_Id}, 
                true)));
        this->columnCUSTOMCOMMENTSTYPE->Namespace = L"";
        this->columnPROJECTNAME->Namespace = L"";
        this->columnNEXTUNIQUEID->Namespace = L"";
        this->columnLASTMODIFIED->Namespace = L"";
        this->columnFILEVERSION->Namespace = L"";
        this->columnFILENAME->Namespace = L"";
        this->columnFILEFORMAT->Namespace = L"";
        this->columnEARLIESTDUEDATE->Namespace = L"";
        this->columnTODOLIST_Id->AutoIncrement = true;
        this->columnTODOLIST_Id->AllowDBNull = false;
        this->columnTODOLIST_Id->Unique = true;
    }
    
    inline ToDoList::NewDataSet::TODOLISTRow^  NewDataSet::TODOLISTDataTable::NewTODOLISTRow() {
        return (cli::safe_cast<ToDoList::NewDataSet::TODOLISTRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::TODOLISTDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew ToDoList::NewDataSet::TODOLISTRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::TODOLISTDataTable::GetRowType() {
        return ToDoList::NewDataSet::TODOLISTRow::typeid;
    }
    
    inline ::System::Void NewDataSet::TODOLISTDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->TODOLISTRowChanged(this, (gcnew ToDoList::NewDataSet::TODOLISTRowChangeEvent((cli::safe_cast<ToDoList::NewDataSet::TODOLISTRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::TODOLISTDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->TODOLISTRowChanging(this, (gcnew ToDoList::NewDataSet::TODOLISTRowChangeEvent((cli::safe_cast<ToDoList::NewDataSet::TODOLISTRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::TODOLISTDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->TODOLISTRowDeleted(this, (gcnew ToDoList::NewDataSet::TODOLISTRowChangeEvent((cli::safe_cast<ToDoList::NewDataSet::TODOLISTRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::TODOLISTDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->TODOLISTRowDeleting(this, (gcnew ToDoList::NewDataSet::TODOLISTRowChangeEvent((cli::safe_cast<ToDoList::NewDataSet::TODOLISTRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::TODOLISTDataTable::RemoveTODOLISTRow(ToDoList::NewDataSet::TODOLISTRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::TODOLISTDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        ToDoList::NewDataSet^  ds = (gcnew ToDoList::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"TODOLISTDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::TASKDataTable::TASKDataTable() {
        this->TableName = L"TASK";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::TASKDataTable::TASKDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::TASKDataTable::TASKDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::ALLOCATEDBYColumn::get() {
        return this->columnALLOCATEDBY;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::CALCCOSTColumn::get() {
        return this->columnCALCCOST;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::CALCPERCENTDONEColumn::get() {
        return this->columnCALCPERCENTDONE;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::CALCTIMEESTIMATEColumn::get() {
        return this->columnCALCTIMEESTIMATE;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::CALCTIMESPENTColumn::get() {
        return this->columnCALCTIMESPENT;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::CATEGORYColumn::get() {
        return this->columnCATEGORY;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::CATEGORY1Column::get() {
        return this->columnCATEGORY1;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::CATEGORY2Column::get() {
        return this->columnCATEGORY2;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::CATEGORY3Column::get() {
        return this->columnCATEGORY3;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::CATEGORY4Column::get() {
        return this->columnCATEGORY4;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::CATEGORY5Column::get() {
        return this->columnCATEGORY5;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::CATEGORY6Column::get() {
        return this->columnCATEGORY6;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::CATEGORY7Column::get() {
        return this->columnCATEGORY7;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::CATEGORY8Column::get() {
        return this->columnCATEGORY8;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::CATEGORY9Column::get() {
        return this->columnCATEGORY9;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::COLORColumn::get() {
        return this->columnCOLOR;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::COMMENTSColumn::get() {
        return this->columnCOMMENTS;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::COMMENTSTYPEColumn::get() {
        return this->columnCOMMENTSTYPE;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::COSTColumn::get() {
        return this->columnCOST;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::CREATIONDATEColumn::get() {
        return this->columnCREATIONDATE;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::CREATIONDATESTRINGColumn::get() {
        return this->columnCREATIONDATESTRING;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::CUSTOMCOMMENTSColumn::get() {
        return this->columnCUSTOMCOMMENTS;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::DEPENDSColumn::get() {
        return this->columnDEPENDS;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::DEPENDS1Column::get() {
        return this->columnDEPENDS1;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::DEPENDS2Column::get() {
        return this->columnDEPENDS2;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::DEPENDS3Column::get() {
        return this->columnDEPENDS3;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::DEPENDS4Column::get() {
        return this->columnDEPENDS4;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::DEPENDS5Column::get() {
        return this->columnDEPENDS5;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::DEPENDS6Column::get() {
        return this->columnDEPENDS6;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::DEPENDS7Column::get() {
        return this->columnDEPENDS7;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::DEPENDS8Column::get() {
        return this->columnDEPENDS8;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::DEPENDS9Column::get() {
        return this->columnDEPENDS9;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::DONEDATEColumn::get() {
        return this->columnDONEDATE;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::DONEDATESTRINGColumn::get() {
        return this->columnDONEDATESTRING;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::DUEDATEColumn::get() {
        return this->columnDUEDATE;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::DUEDATESTRINGColumn::get() {
        return this->columnDUEDATESTRING;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::EXTERNALIDColumn::get() {
        return this->columnEXTERNALID;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::FILEREFPATHColumn::get() {
        return this->columnFILEREFPATH;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::FLAGColumn::get() {
        return this->columnFLAG;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::ICONINDEXColumn::get() {
        return this->columnICONINDEX;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::IDColumn::get() {
        return this->columnID;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::LASTMODColumn::get() {
        return this->columnLASTMOD;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::LASTMODSTRINGColumn::get() {
        return this->columnLASTMODSTRING;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::NUMCATEGORYColumn::get() {
        return this->columnNUMCATEGORY;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::NUMDEPENDSColumn::get() {
        return this->columnNUMDEPENDS;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::NUMPERSONColumn::get() {
        return this->columnNUMPERSON;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::PERCENTDONEColumn::get() {
        return this->columnPERCENTDONE;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::PERSONColumn::get() {
        return this->columnPERSON;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::PERSON1Column::get() {
        return this->columnPERSON1;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::PERSON2Column::get() {
        return this->columnPERSON2;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::PERSON3Column::get() {
        return this->columnPERSON3;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::PERSON4Column::get() {
        return this->columnPERSON4;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::PERSON5Column::get() {
        return this->columnPERSON5;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::PERSON6Column::get() {
        return this->columnPERSON6;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::PERSON7Column::get() {
        return this->columnPERSON7;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::PERSON8Column::get() {
        return this->columnPERSON8;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::PERSON9Column::get() {
        return this->columnPERSON9;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::POSColumn::get() {
        return this->columnPOS;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::PRIORITYColumn::get() {
        return this->columnPRIORITY;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::PRIORITYCOLORColumn::get() {
        return this->columnPRIORITYCOLOR;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::PRIORITYWEBCOLORColumn::get() {
        return this->columnPRIORITYWEBCOLOR;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::RISKColumn::get() {
        return this->columnRISK;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::STARTDATEColumn::get() {
        return this->columnSTARTDATE;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::STARTDATESTRINGColumn::get() {
        return this->columnSTARTDATESTRING;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::STATUSColumn::get() {
        return this->columnSTATUS;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::TEXTCOLORColumn::get() {
        return this->columnTEXTCOLOR;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::TEXTWEBCOLORColumn::get() {
        return this->columnTEXTWEBCOLOR;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::TIMEESTIMATEColumn::get() {
        return this->columnTIMEESTIMATE;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::TIMEESTUNITSColumn::get() {
        return this->columnTIMEESTUNITS;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::TIMESPENTColumn::get() {
        return this->columnTIMESPENT;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::TIMESPENTUNITSColumn::get() {
        return this->columnTIMESPENTUNITS;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::TITLEColumn::get() {
        return this->columnTITLE;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::VERSIONColumn::get() {
        return this->columnVERSION;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::WEBCOLORColumn::get() {
        return this->columnWEBCOLOR;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TASKDataTable::TODOLIST_IdColumn::get() {
        return this->columnTODOLIST_Id;
    }
    
    inline ::System::Int32 NewDataSet::TASKDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline ToDoList::NewDataSet::TASKRow^  NewDataSet::TASKDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<ToDoList::NewDataSet::TASKRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::TASKDataTable::AddTASKRow(ToDoList::NewDataSet::TASKRow^  row) {
        this->Rows->Add(row);
    }
    
    inline ToDoList::NewDataSet::TASKRow^  NewDataSet::TASKDataTable::AddTASKRow(
                System::String^  ALLOCATEDBY, 
                System::String^  CALCCOST, 
                System::String^  CALCPERCENTDONE, 
                System::String^  CALCTIMEESTIMATE, 
                System::String^  CALCTIMESPENT, 
                System::String^  CATEGORY, 
                System::String^  CATEGORY1, 
                System::String^  CATEGORY2, 
                System::String^  CATEGORY3, 
                System::String^  CATEGORY4, 
                System::String^  CATEGORY5, 
                System::String^  CATEGORY6, 
                System::String^  CATEGORY7, 
                System::String^  CATEGORY8, 
                System::String^  CATEGORY9, 
                System::String^  COLOR, 
                System::String^  COMMENTS, 
                System::String^  COMMENTSTYPE, 
                System::String^  COST, 
                System::String^  CREATIONDATE, 
                System::String^  CREATIONDATESTRING, 
                System::String^  CUSTOMCOMMENTS, 
                System::String^  DEPENDS, 
                System::String^  DEPENDS1, 
                System::String^  DEPENDS2, 
                System::String^  DEPENDS3, 
                System::String^  DEPENDS4, 
                System::String^  DEPENDS5, 
                System::String^  DEPENDS6, 
                System::String^  DEPENDS7, 
                System::String^  DEPENDS8, 
                System::String^  DEPENDS9, 
                System::String^  DONEDATE, 
                System::String^  DONEDATESTRING, 
                System::String^  DUEDATE, 
                System::String^  DUEDATESTRING, 
                System::String^  EXTERNALID, 
                System::String^  FILEREFPATH, 
                System::String^  FLAG, 
                System::String^  ICONINDEX, 
                System::String^  ID, 
                System::String^  LASTMOD, 
                System::String^  LASTMODSTRING, 
                System::String^  NUMCATEGORY, 
                System::String^  NUMDEPENDS, 
                System::String^  NUMPERSON, 
                System::String^  PERCENTDONE, 
                System::String^  PERSON, 
                System::String^  PERSON1, 
                System::String^  PERSON2, 
                System::String^  PERSON3, 
                System::String^  PERSON4, 
                System::String^  PERSON5, 
                System::String^  PERSON6, 
                System::String^  PERSON7, 
                System::String^  PERSON8, 
                System::String^  PERSON9, 
                System::String^  POS, 
                System::String^  PRIORITY, 
                System::String^  PRIORITYCOLOR, 
                System::String^  PRIORITYWEBCOLOR, 
                System::String^  RISK, 
                System::String^  STARTDATE, 
                System::String^  STARTDATESTRING, 
                System::String^  STATUS, 
                System::String^  TEXTCOLOR, 
                System::String^  TEXTWEBCOLOR, 
                System::String^  TIMEESTIMATE, 
                System::String^  TIMEESTUNITS, 
                System::String^  TIMESPENT, 
                System::String^  TIMESPENTUNITS, 
                System::String^  TITLE, 
                System::String^  VERSION, 
                System::String^  WEBCOLOR, 
                ToDoList::NewDataSet::TODOLISTRow^  parentTODOLISTRowByTODOLIST_TASK) {
        ToDoList::NewDataSet::TASKRow^  rowTASKRow = (cli::safe_cast<ToDoList::NewDataSet::TASKRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(75) {ALLOCATEDBY, CALCCOST, 
            CALCPERCENTDONE, CALCTIMEESTIMATE, CALCTIMESPENT, CATEGORY, CATEGORY1, CATEGORY2, CATEGORY3, CATEGORY4, CATEGORY5, CATEGORY6, 
            CATEGORY7, CATEGORY8, CATEGORY9, COLOR, COMMENTS, COMMENTSTYPE, COST, CREATIONDATE, CREATIONDATESTRING, CUSTOMCOMMENTS, DEPENDS, 
            DEPENDS1, DEPENDS2, DEPENDS3, DEPENDS4, DEPENDS5, DEPENDS6, DEPENDS7, DEPENDS8, DEPENDS9, DONEDATE, DONEDATESTRING, DUEDATE, 
            DUEDATESTRING, EXTERNALID, FILEREFPATH, FLAG, ICONINDEX, ID, LASTMOD, LASTMODSTRING, NUMCATEGORY, NUMDEPENDS, NUMPERSON, 
            PERCENTDONE, PERSON, PERSON1, PERSON2, PERSON3, PERSON4, PERSON5, PERSON6, PERSON7, PERSON8, PERSON9, POS, PRIORITY, PRIORITYCOLOR, 
            PRIORITYWEBCOLOR, RISK, STARTDATE, STARTDATESTRING, STATUS, TEXTCOLOR, TEXTWEBCOLOR, TIMEESTIMATE, TIMEESTUNITS, TIMESPENT, 
            TIMESPENTUNITS, TITLE, VERSION, WEBCOLOR, nullptr};
        if (parentTODOLISTRowByTODOLIST_TASK != nullptr) {
            columnValuesArray[74] = parentTODOLISTRowByTODOLIST_TASK[8];
        }
        rowTASKRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowTASKRow);
        return rowTASKRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::TASKDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::TASKDataTable::Clone() {
        ToDoList::NewDataSet::TASKDataTable^  cln = (cli::safe_cast<ToDoList::NewDataSet::TASKDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::TASKDataTable::CreateInstance() {
        return (gcnew ToDoList::NewDataSet::TASKDataTable());
    }
    
    inline ::System::Void NewDataSet::TASKDataTable::InitVars() {
        this->columnALLOCATEDBY = __super::Columns[L"ALLOCATEDBY"];
        this->columnCALCCOST = __super::Columns[L"CALCCOST"];
        this->columnCALCPERCENTDONE = __super::Columns[L"CALCPERCENTDONE"];
        this->columnCALCTIMEESTIMATE = __super::Columns[L"CALCTIMEESTIMATE"];
        this->columnCALCTIMESPENT = __super::Columns[L"CALCTIMESPENT"];
        this->columnCATEGORY = __super::Columns[L"CATEGORY"];
        this->columnCATEGORY1 = __super::Columns[L"CATEGORY1"];
        this->columnCATEGORY2 = __super::Columns[L"CATEGORY2"];
        this->columnCATEGORY3 = __super::Columns[L"CATEGORY3"];
        this->columnCATEGORY4 = __super::Columns[L"CATEGORY4"];
        this->columnCATEGORY5 = __super::Columns[L"CATEGORY5"];
        this->columnCATEGORY6 = __super::Columns[L"CATEGORY6"];
        this->columnCATEGORY7 = __super::Columns[L"CATEGORY7"];
        this->columnCATEGORY8 = __super::Columns[L"CATEGORY8"];
        this->columnCATEGORY9 = __super::Columns[L"CATEGORY9"];
        this->columnCOLOR = __super::Columns[L"COLOR"];
        this->columnCOMMENTS = __super::Columns[L"COMMENTS"];
        this->columnCOMMENTSTYPE = __super::Columns[L"COMMENTSTYPE"];
        this->columnCOST = __super::Columns[L"COST"];
        this->columnCREATIONDATE = __super::Columns[L"CREATIONDATE"];
        this->columnCREATIONDATESTRING = __super::Columns[L"CREATIONDATESTRING"];
        this->columnCUSTOMCOMMENTS = __super::Columns[L"CUSTOMCOMMENTS"];
        this->columnDEPENDS = __super::Columns[L"DEPENDS"];
        this->columnDEPENDS1 = __super::Columns[L"DEPENDS1"];
        this->columnDEPENDS2 = __super::Columns[L"DEPENDS2"];
        this->columnDEPENDS3 = __super::Columns[L"DEPENDS3"];
        this->columnDEPENDS4 = __super::Columns[L"DEPENDS4"];
        this->columnDEPENDS5 = __super::Columns[L"DEPENDS5"];
        this->columnDEPENDS6 = __super::Columns[L"DEPENDS6"];
        this->columnDEPENDS7 = __super::Columns[L"DEPENDS7"];
        this->columnDEPENDS8 = __super::Columns[L"DEPENDS8"];
        this->columnDEPENDS9 = __super::Columns[L"DEPENDS9"];
        this->columnDONEDATE = __super::Columns[L"DONEDATE"];
        this->columnDONEDATESTRING = __super::Columns[L"DONEDATESTRING"];
        this->columnDUEDATE = __super::Columns[L"DUEDATE"];
        this->columnDUEDATESTRING = __super::Columns[L"DUEDATESTRING"];
        this->columnEXTERNALID = __super::Columns[L"EXTERNALID"];
        this->columnFILEREFPATH = __super::Columns[L"FILEREFPATH"];
        this->columnFLAG = __super::Columns[L"FLAG"];
        this->columnICONINDEX = __super::Columns[L"ICONINDEX"];
        this->columnID = __super::Columns[L"ID"];
        this->columnLASTMOD = __super::Columns[L"LASTMOD"];
        this->columnLASTMODSTRING = __super::Columns[L"LASTMODSTRING"];
        this->columnNUMCATEGORY = __super::Columns[L"NUMCATEGORY"];
        this->columnNUMDEPENDS = __super::Columns[L"NUMDEPENDS"];
        this->columnNUMPERSON = __super::Columns[L"NUMPERSON"];
        this->columnPERCENTDONE = __super::Columns[L"PERCENTDONE"];
        this->columnPERSON = __super::Columns[L"PERSON"];
        this->columnPERSON1 = __super::Columns[L"PERSON1"];
        this->columnPERSON2 = __super::Columns[L"PERSON2"];
        this->columnPERSON3 = __super::Columns[L"PERSON3"];
        this->columnPERSON4 = __super::Columns[L"PERSON4"];
        this->columnPERSON5 = __super::Columns[L"PERSON5"];
        this->columnPERSON6 = __super::Columns[L"PERSON6"];
        this->columnPERSON7 = __super::Columns[L"PERSON7"];
        this->columnPERSON8 = __super::Columns[L"PERSON8"];
        this->columnPERSON9 = __super::Columns[L"PERSON9"];
        this->columnPOS = __super::Columns[L"POS"];
        this->columnPRIORITY = __super::Columns[L"PRIORITY"];
        this->columnPRIORITYCOLOR = __super::Columns[L"PRIORITYCOLOR"];
        this->columnPRIORITYWEBCOLOR = __super::Columns[L"PRIORITYWEBCOLOR"];
        this->columnRISK = __super::Columns[L"RISK"];
        this->columnSTARTDATE = __super::Columns[L"STARTDATE"];
        this->columnSTARTDATESTRING = __super::Columns[L"STARTDATESTRING"];
        this->columnSTATUS = __super::Columns[L"STATUS"];
        this->columnTEXTCOLOR = __super::Columns[L"TEXTCOLOR"];
        this->columnTEXTWEBCOLOR = __super::Columns[L"TEXTWEBCOLOR"];
        this->columnTIMEESTIMATE = __super::Columns[L"TIMEESTIMATE"];
        this->columnTIMEESTUNITS = __super::Columns[L"TIMEESTUNITS"];
        this->columnTIMESPENT = __super::Columns[L"TIMESPENT"];
        this->columnTIMESPENTUNITS = __super::Columns[L"TIMESPENTUNITS"];
        this->columnTITLE = __super::Columns[L"TITLE"];
        this->columnVERSION = __super::Columns[L"VERSION"];
        this->columnWEBCOLOR = __super::Columns[L"WEBCOLOR"];
        this->columnTODOLIST_Id = __super::Columns[L"TODOLIST_Id"];
    }
    
    inline ::System::Void NewDataSet::TASKDataTable::InitClass() {
        this->columnALLOCATEDBY = (gcnew ::System::Data::DataColumn(L"ALLOCATEDBY", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnALLOCATEDBY);
        this->columnCALCCOST = (gcnew ::System::Data::DataColumn(L"CALCCOST", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnCALCCOST);
        this->columnCALCPERCENTDONE = (gcnew ::System::Data::DataColumn(L"CALCPERCENTDONE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnCALCPERCENTDONE);
        this->columnCALCTIMEESTIMATE = (gcnew ::System::Data::DataColumn(L"CALCTIMEESTIMATE", ::System::String::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnCALCTIMEESTIMATE);
        this->columnCALCTIMESPENT = (gcnew ::System::Data::DataColumn(L"CALCTIMESPENT", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnCALCTIMESPENT);
        this->columnCATEGORY = (gcnew ::System::Data::DataColumn(L"CATEGORY", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnCATEGORY);
        this->columnCATEGORY1 = (gcnew ::System::Data::DataColumn(L"CATEGORY1", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnCATEGORY1);
        this->columnCATEGORY2 = (gcnew ::System::Data::DataColumn(L"CATEGORY2", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnCATEGORY2);
        this->columnCATEGORY3 = (gcnew ::System::Data::DataColumn(L"CATEGORY3", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnCATEGORY3);
        this->columnCATEGORY4 = (gcnew ::System::Data::DataColumn(L"CATEGORY4", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnCATEGORY4);
        this->columnCATEGORY5 = (gcnew ::System::Data::DataColumn(L"CATEGORY5", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnCATEGORY5);
        this->columnCATEGORY6 = (gcnew ::System::Data::DataColumn(L"CATEGORY6", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnCATEGORY6);
        this->columnCATEGORY7 = (gcnew ::System::Data::DataColumn(L"CATEGORY7", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnCATEGORY7);
        this->columnCATEGORY8 = (gcnew ::System::Data::DataColumn(L"CATEGORY8", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnCATEGORY8);
        this->columnCATEGORY9 = (gcnew ::System::Data::DataColumn(L"CATEGORY9", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnCATEGORY9);
        this->columnCOLOR = (gcnew ::System::Data::DataColumn(L"COLOR", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnCOLOR);
        this->columnCOMMENTS = (gcnew ::System::Data::DataColumn(L"COMMENTS", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnCOMMENTS);
        this->columnCOMMENTSTYPE = (gcnew ::System::Data::DataColumn(L"COMMENTSTYPE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnCOMMENTSTYPE);
        this->columnCOST = (gcnew ::System::Data::DataColumn(L"COST", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnCOST);
        this->columnCREATIONDATE = (gcnew ::System::Data::DataColumn(L"CREATIONDATE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnCREATIONDATE);
        this->columnCREATIONDATESTRING = (gcnew ::System::Data::DataColumn(L"CREATIONDATESTRING", ::System::String::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnCREATIONDATESTRING);
        this->columnCUSTOMCOMMENTS = (gcnew ::System::Data::DataColumn(L"CUSTOMCOMMENTS", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnCUSTOMCOMMENTS);
        this->columnDEPENDS = (gcnew ::System::Data::DataColumn(L"DEPENDS", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnDEPENDS);
        this->columnDEPENDS1 = (gcnew ::System::Data::DataColumn(L"DEPENDS1", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnDEPENDS1);
        this->columnDEPENDS2 = (gcnew ::System::Data::DataColumn(L"DEPENDS2", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnDEPENDS2);
        this->columnDEPENDS3 = (gcnew ::System::Data::DataColumn(L"DEPENDS3", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnDEPENDS3);
        this->columnDEPENDS4 = (gcnew ::System::Data::DataColumn(L"DEPENDS4", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnDEPENDS4);
        this->columnDEPENDS5 = (gcnew ::System::Data::DataColumn(L"DEPENDS5", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnDEPENDS5);
        this->columnDEPENDS6 = (gcnew ::System::Data::DataColumn(L"DEPENDS6", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnDEPENDS6);
        this->columnDEPENDS7 = (gcnew ::System::Data::DataColumn(L"DEPENDS7", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnDEPENDS7);
        this->columnDEPENDS8 = (gcnew ::System::Data::DataColumn(L"DEPENDS8", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnDEPENDS8);
        this->columnDEPENDS9 = (gcnew ::System::Data::DataColumn(L"DEPENDS9", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnDEPENDS9);
        this->columnDONEDATE = (gcnew ::System::Data::DataColumn(L"DONEDATE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnDONEDATE);
        this->columnDONEDATESTRING = (gcnew ::System::Data::DataColumn(L"DONEDATESTRING", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnDONEDATESTRING);
        this->columnDUEDATE = (gcnew ::System::Data::DataColumn(L"DUEDATE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnDUEDATE);
        this->columnDUEDATESTRING = (gcnew ::System::Data::DataColumn(L"DUEDATESTRING", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnDUEDATESTRING);
        this->columnEXTERNALID = (gcnew ::System::Data::DataColumn(L"EXTERNALID", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnEXTERNALID);
        this->columnFILEREFPATH = (gcnew ::System::Data::DataColumn(L"FILEREFPATH", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnFILEREFPATH);
        this->columnFLAG = (gcnew ::System::Data::DataColumn(L"FLAG", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnFLAG);
        this->columnICONINDEX = (gcnew ::System::Data::DataColumn(L"ICONINDEX", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnICONINDEX);
        this->columnID = (gcnew ::System::Data::DataColumn(L"ID", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnID);
        this->columnLASTMOD = (gcnew ::System::Data::DataColumn(L"LASTMOD", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnLASTMOD);
        this->columnLASTMODSTRING = (gcnew ::System::Data::DataColumn(L"LASTMODSTRING", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnLASTMODSTRING);
        this->columnNUMCATEGORY = (gcnew ::System::Data::DataColumn(L"NUMCATEGORY", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnNUMCATEGORY);
        this->columnNUMDEPENDS = (gcnew ::System::Data::DataColumn(L"NUMDEPENDS", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnNUMDEPENDS);
        this->columnNUMPERSON = (gcnew ::System::Data::DataColumn(L"NUMPERSON", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnNUMPERSON);
        this->columnPERCENTDONE = (gcnew ::System::Data::DataColumn(L"PERCENTDONE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnPERCENTDONE);
        this->columnPERSON = (gcnew ::System::Data::DataColumn(L"PERSON", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnPERSON);
        this->columnPERSON1 = (gcnew ::System::Data::DataColumn(L"PERSON1", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnPERSON1);
        this->columnPERSON2 = (gcnew ::System::Data::DataColumn(L"PERSON2", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnPERSON2);
        this->columnPERSON3 = (gcnew ::System::Data::DataColumn(L"PERSON3", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnPERSON3);
        this->columnPERSON4 = (gcnew ::System::Data::DataColumn(L"PERSON4", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnPERSON4);
        this->columnPERSON5 = (gcnew ::System::Data::DataColumn(L"PERSON5", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnPERSON5);
        this->columnPERSON6 = (gcnew ::System::Data::DataColumn(L"PERSON6", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnPERSON6);
        this->columnPERSON7 = (gcnew ::System::Data::DataColumn(L"PERSON7", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnPERSON7);
        this->columnPERSON8 = (gcnew ::System::Data::DataColumn(L"PERSON8", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnPERSON8);
        this->columnPERSON9 = (gcnew ::System::Data::DataColumn(L"PERSON9", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnPERSON9);
        this->columnPOS = (gcnew ::System::Data::DataColumn(L"POS", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnPOS);
        this->columnPRIORITY = (gcnew ::System::Data::DataColumn(L"PRIORITY", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnPRIORITY);
        this->columnPRIORITYCOLOR = (gcnew ::System::Data::DataColumn(L"PRIORITYCOLOR", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnPRIORITYCOLOR);
        this->columnPRIORITYWEBCOLOR = (gcnew ::System::Data::DataColumn(L"PRIORITYWEBCOLOR", ::System::String::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnPRIORITYWEBCOLOR);
        this->columnRISK = (gcnew ::System::Data::DataColumn(L"RISK", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnRISK);
        this->columnSTARTDATE = (gcnew ::System::Data::DataColumn(L"STARTDATE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnSTARTDATE);
        this->columnSTARTDATESTRING = (gcnew ::System::Data::DataColumn(L"STARTDATESTRING", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnSTARTDATESTRING);
        this->columnSTATUS = (gcnew ::System::Data::DataColumn(L"STATUS", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnSTATUS);
        this->columnTEXTCOLOR = (gcnew ::System::Data::DataColumn(L"TEXTCOLOR", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnTEXTCOLOR);
        this->columnTEXTWEBCOLOR = (gcnew ::System::Data::DataColumn(L"TEXTWEBCOLOR", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnTEXTWEBCOLOR);
        this->columnTIMEESTIMATE = (gcnew ::System::Data::DataColumn(L"TIMEESTIMATE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnTIMEESTIMATE);
        this->columnTIMEESTUNITS = (gcnew ::System::Data::DataColumn(L"TIMEESTUNITS", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnTIMEESTUNITS);
        this->columnTIMESPENT = (gcnew ::System::Data::DataColumn(L"TIMESPENT", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnTIMESPENT);
        this->columnTIMESPENTUNITS = (gcnew ::System::Data::DataColumn(L"TIMESPENTUNITS", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnTIMESPENTUNITS);
        this->columnTITLE = (gcnew ::System::Data::DataColumn(L"TITLE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnTITLE);
        this->columnVERSION = (gcnew ::System::Data::DataColumn(L"VERSION", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnVERSION);
        this->columnWEBCOLOR = (gcnew ::System::Data::DataColumn(L"WEBCOLOR", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnWEBCOLOR);
        this->columnTODOLIST_Id = (gcnew ::System::Data::DataColumn(L"TODOLIST_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnTODOLIST_Id);
        this->columnALLOCATEDBY->Namespace = L"";
        this->columnCALCCOST->Namespace = L"";
        this->columnCALCPERCENTDONE->Namespace = L"";
        this->columnCALCTIMEESTIMATE->Namespace = L"";
        this->columnCALCTIMESPENT->Namespace = L"";
        this->columnCATEGORY->Namespace = L"";
        this->columnCATEGORY1->Namespace = L"";
        this->columnCATEGORY2->Namespace = L"";
        this->columnCATEGORY3->Namespace = L"";
        this->columnCATEGORY4->Namespace = L"";
        this->columnCATEGORY5->Namespace = L"";
        this->columnCATEGORY6->Namespace = L"";
        this->columnCATEGORY7->Namespace = L"";
        this->columnCATEGORY8->Namespace = L"";
        this->columnCATEGORY9->Namespace = L"";
        this->columnCOLOR->Namespace = L"";
        this->columnCOMMENTS->Namespace = L"";
        this->columnCOMMENTSTYPE->Namespace = L"";
        this->columnCOST->Namespace = L"";
        this->columnCREATIONDATE->Namespace = L"";
        this->columnCREATIONDATESTRING->Namespace = L"";
        this->columnCUSTOMCOMMENTS->Namespace = L"";
        this->columnDEPENDS->Namespace = L"";
        this->columnDEPENDS1->Namespace = L"";
        this->columnDEPENDS2->Namespace = L"";
        this->columnDEPENDS3->Namespace = L"";
        this->columnDEPENDS4->Namespace = L"";
        this->columnDEPENDS5->Namespace = L"";
        this->columnDEPENDS6->Namespace = L"";
        this->columnDEPENDS7->Namespace = L"";
        this->columnDEPENDS8->Namespace = L"";
        this->columnDEPENDS9->Namespace = L"";
        this->columnDONEDATE->Namespace = L"";
        this->columnDONEDATESTRING->Namespace = L"";
        this->columnDUEDATE->Namespace = L"";
        this->columnDUEDATESTRING->Namespace = L"";
        this->columnEXTERNALID->Namespace = L"";
        this->columnFILEREFPATH->Namespace = L"";
        this->columnFLAG->Namespace = L"";
        this->columnICONINDEX->Namespace = L"";
        this->columnID->Namespace = L"";
        this->columnLASTMOD->Namespace = L"";
        this->columnLASTMODSTRING->Namespace = L"";
        this->columnNUMCATEGORY->Namespace = L"";
        this->columnNUMDEPENDS->Namespace = L"";
        this->columnNUMPERSON->Namespace = L"";
        this->columnPERCENTDONE->Namespace = L"";
        this->columnPERSON->Namespace = L"";
        this->columnPERSON1->Namespace = L"";
        this->columnPERSON2->Namespace = L"";
        this->columnPERSON3->Namespace = L"";
        this->columnPERSON4->Namespace = L"";
        this->columnPERSON5->Namespace = L"";
        this->columnPERSON6->Namespace = L"";
        this->columnPERSON7->Namespace = L"";
        this->columnPERSON8->Namespace = L"";
        this->columnPERSON9->Namespace = L"";
        this->columnPOS->Namespace = L"";
        this->columnPRIORITY->Namespace = L"";
        this->columnPRIORITYCOLOR->Namespace = L"";
        this->columnPRIORITYWEBCOLOR->Namespace = L"";
        this->columnRISK->Namespace = L"";
        this->columnSTARTDATE->Namespace = L"";
        this->columnSTARTDATESTRING->Namespace = L"";
        this->columnSTATUS->Namespace = L"";
        this->columnTEXTCOLOR->Namespace = L"";
        this->columnTEXTWEBCOLOR->Namespace = L"";
        this->columnTIMEESTIMATE->Namespace = L"";
        this->columnTIMEESTUNITS->Namespace = L"";
        this->columnTIMESPENT->Namespace = L"";
        this->columnTIMESPENTUNITS->Namespace = L"";
        this->columnTITLE->Namespace = L"";
        this->columnVERSION->Namespace = L"";
        this->columnWEBCOLOR->Namespace = L"";
    }
    
    inline ToDoList::NewDataSet::TASKRow^  NewDataSet::TASKDataTable::NewTASKRow() {
        return (cli::safe_cast<ToDoList::NewDataSet::TASKRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::TASKDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew ToDoList::NewDataSet::TASKRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::TASKDataTable::GetRowType() {
        return ToDoList::NewDataSet::TASKRow::typeid;
    }
    
    inline ::System::Void NewDataSet::TASKDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->TASKRowChanged(this, (gcnew ToDoList::NewDataSet::TASKRowChangeEvent((cli::safe_cast<ToDoList::NewDataSet::TASKRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::TASKDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->TASKRowChanging(this, (gcnew ToDoList::NewDataSet::TASKRowChangeEvent((cli::safe_cast<ToDoList::NewDataSet::TASKRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::TASKDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->TASKRowDeleted(this, (gcnew ToDoList::NewDataSet::TASKRowChangeEvent((cli::safe_cast<ToDoList::NewDataSet::TASKRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::TASKDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->TASKRowDeleting(this, (gcnew ToDoList::NewDataSet::TASKRowChangeEvent((cli::safe_cast<ToDoList::NewDataSet::TASKRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::TASKDataTable::RemoveTASKRow(ToDoList::NewDataSet::TASKRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::TASKDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        ToDoList::NewDataSet^  ds = (gcnew ToDoList::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"TASKDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::CATEGORYDataTable::CATEGORYDataTable() {
        this->TableName = L"CATEGORY";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::CATEGORYDataTable::CATEGORYDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::CATEGORYDataTable::CATEGORYDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::CATEGORYDataTable::CATEGORY9Column::get() {
        return this->columnCATEGORY9;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::CATEGORYDataTable::CATEGORY8Column::get() {
        return this->columnCATEGORY8;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::CATEGORYDataTable::CATEGORY7Column::get() {
        return this->columnCATEGORY7;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::CATEGORYDataTable::CATEGORY6Column::get() {
        return this->columnCATEGORY6;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::CATEGORYDataTable::CATEGORY5Column::get() {
        return this->columnCATEGORY5;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::CATEGORYDataTable::CATEGORY4Column::get() {
        return this->columnCATEGORY4;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::CATEGORYDataTable::CATEGORY3Column::get() {
        return this->columnCATEGORY3;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::CATEGORYDataTable::CATEGORY2Column::get() {
        return this->columnCATEGORY2;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::CATEGORYDataTable::CATEGORY1Column::get() {
        return this->columnCATEGORY1;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::CATEGORYDataTable::CATEGORY0Column::get() {
        return this->columnCATEGORY0;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::CATEGORYDataTable::TODOLIST_IdColumn::get() {
        return this->columnTODOLIST_Id;
    }
    
    inline ::System::Int32 NewDataSet::CATEGORYDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline ToDoList::NewDataSet::CATEGORYRow^  NewDataSet::CATEGORYDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<ToDoList::NewDataSet::CATEGORYRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::CATEGORYDataTable::AddCATEGORYRow(ToDoList::NewDataSet::CATEGORYRow^  row) {
        this->Rows->Add(row);
    }
    
    inline ToDoList::NewDataSet::CATEGORYRow^  NewDataSet::CATEGORYDataTable::AddCATEGORYRow(
                System::String^  CATEGORY9, 
                System::String^  CATEGORY8, 
                System::String^  CATEGORY7, 
                System::String^  CATEGORY6, 
                System::String^  CATEGORY5, 
                System::String^  CATEGORY4, 
                System::String^  CATEGORY3, 
                System::String^  CATEGORY2, 
                System::String^  CATEGORY1, 
                System::String^  CATEGORY0, 
                ToDoList::NewDataSet::TODOLISTRow^  parentTODOLISTRowByTODOLIST_CATEGORY) {
        ToDoList::NewDataSet::CATEGORYRow^  rowCATEGORYRow = (cli::safe_cast<ToDoList::NewDataSet::CATEGORYRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(11) {CATEGORY9, CATEGORY8, 
            CATEGORY7, CATEGORY6, CATEGORY5, CATEGORY4, CATEGORY3, CATEGORY2, CATEGORY1, CATEGORY0, nullptr};
        if (parentTODOLISTRowByTODOLIST_CATEGORY != nullptr) {
            columnValuesArray[10] = parentTODOLISTRowByTODOLIST_CATEGORY[8];
        }
        rowCATEGORYRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowCATEGORYRow);
        return rowCATEGORYRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::CATEGORYDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::CATEGORYDataTable::Clone() {
        ToDoList::NewDataSet::CATEGORYDataTable^  cln = (cli::safe_cast<ToDoList::NewDataSet::CATEGORYDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::CATEGORYDataTable::CreateInstance() {
        return (gcnew ToDoList::NewDataSet::CATEGORYDataTable());
    }
    
    inline ::System::Void NewDataSet::CATEGORYDataTable::InitVars() {
        this->columnCATEGORY9 = __super::Columns[L"CATEGORY9"];
        this->columnCATEGORY8 = __super::Columns[L"CATEGORY8"];
        this->columnCATEGORY7 = __super::Columns[L"CATEGORY7"];
        this->columnCATEGORY6 = __super::Columns[L"CATEGORY6"];
        this->columnCATEGORY5 = __super::Columns[L"CATEGORY5"];
        this->columnCATEGORY4 = __super::Columns[L"CATEGORY4"];
        this->columnCATEGORY3 = __super::Columns[L"CATEGORY3"];
        this->columnCATEGORY2 = __super::Columns[L"CATEGORY2"];
        this->columnCATEGORY1 = __super::Columns[L"CATEGORY1"];
        this->columnCATEGORY0 = __super::Columns[L"CATEGORY0"];
        this->columnTODOLIST_Id = __super::Columns[L"TODOLIST_Id"];
    }
    
    inline ::System::Void NewDataSet::CATEGORYDataTable::InitClass() {
        this->columnCATEGORY9 = (gcnew ::System::Data::DataColumn(L"CATEGORY9", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnCATEGORY9);
        this->columnCATEGORY8 = (gcnew ::System::Data::DataColumn(L"CATEGORY8", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnCATEGORY8);
        this->columnCATEGORY7 = (gcnew ::System::Data::DataColumn(L"CATEGORY7", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnCATEGORY7);
        this->columnCATEGORY6 = (gcnew ::System::Data::DataColumn(L"CATEGORY6", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnCATEGORY6);
        this->columnCATEGORY5 = (gcnew ::System::Data::DataColumn(L"CATEGORY5", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnCATEGORY5);
        this->columnCATEGORY4 = (gcnew ::System::Data::DataColumn(L"CATEGORY4", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnCATEGORY4);
        this->columnCATEGORY3 = (gcnew ::System::Data::DataColumn(L"CATEGORY3", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnCATEGORY3);
        this->columnCATEGORY2 = (gcnew ::System::Data::DataColumn(L"CATEGORY2", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnCATEGORY2);
        this->columnCATEGORY1 = (gcnew ::System::Data::DataColumn(L"CATEGORY1", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnCATEGORY1);
        this->columnCATEGORY0 = (gcnew ::System::Data::DataColumn(L"CATEGORY0", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnCATEGORY0);
        this->columnTODOLIST_Id = (gcnew ::System::Data::DataColumn(L"TODOLIST_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnTODOLIST_Id);
        this->columnCATEGORY9->Namespace = L"";
        this->columnCATEGORY8->Namespace = L"";
        this->columnCATEGORY7->Namespace = L"";
        this->columnCATEGORY6->Namespace = L"";
        this->columnCATEGORY5->Namespace = L"";
        this->columnCATEGORY4->Namespace = L"";
        this->columnCATEGORY3->Namespace = L"";
        this->columnCATEGORY2->Namespace = L"";
        this->columnCATEGORY1->Namespace = L"";
        this->columnCATEGORY0->AllowDBNull = false;
        this->columnCATEGORY0->Namespace = L"";
    }
    
    inline ToDoList::NewDataSet::CATEGORYRow^  NewDataSet::CATEGORYDataTable::NewCATEGORYRow() {
        return (cli::safe_cast<ToDoList::NewDataSet::CATEGORYRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::CATEGORYDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew ToDoList::NewDataSet::CATEGORYRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::CATEGORYDataTable::GetRowType() {
        return ToDoList::NewDataSet::CATEGORYRow::typeid;
    }
    
    inline ::System::Void NewDataSet::CATEGORYDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->CATEGORYRowChanged(this, (gcnew ToDoList::NewDataSet::CATEGORYRowChangeEvent((cli::safe_cast<ToDoList::NewDataSet::CATEGORYRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::CATEGORYDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->CATEGORYRowChanging(this, (gcnew ToDoList::NewDataSet::CATEGORYRowChangeEvent((cli::safe_cast<ToDoList::NewDataSet::CATEGORYRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::CATEGORYDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->CATEGORYRowDeleted(this, (gcnew ToDoList::NewDataSet::CATEGORYRowChangeEvent((cli::safe_cast<ToDoList::NewDataSet::CATEGORYRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::CATEGORYDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->CATEGORYRowDeleting(this, (gcnew ToDoList::NewDataSet::CATEGORYRowChangeEvent((cli::safe_cast<ToDoList::NewDataSet::CATEGORYRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::CATEGORYDataTable::RemoveCATEGORYRow(ToDoList::NewDataSet::CATEGORYRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::CATEGORYDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        ToDoList::NewDataSet^  ds = (gcnew ToDoList::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"CATEGORYDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::STATUSDataTable::STATUSDataTable() {
        this->TableName = L"STATUS";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::STATUSDataTable::STATUSDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::STATUSDataTable::STATUSDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::STATUSDataTable::STATUS9Column::get() {
        return this->columnSTATUS9;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::STATUSDataTable::STATUS8Column::get() {
        return this->columnSTATUS8;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::STATUSDataTable::STATUS7Column::get() {
        return this->columnSTATUS7;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::STATUSDataTable::STATUS6Column::get() {
        return this->columnSTATUS6;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::STATUSDataTable::STATUS5Column::get() {
        return this->columnSTATUS5;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::STATUSDataTable::STATUS4Column::get() {
        return this->columnSTATUS4;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::STATUSDataTable::STATUS3Column::get() {
        return this->columnSTATUS3;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::STATUSDataTable::STATUS2Column::get() {
        return this->columnSTATUS2;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::STATUSDataTable::STATUS1Column::get() {
        return this->columnSTATUS1;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::STATUSDataTable::STATUS0Column::get() {
        return this->columnSTATUS0;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::STATUSDataTable::TODOLIST_IdColumn::get() {
        return this->columnTODOLIST_Id;
    }
    
    inline ::System::Int32 NewDataSet::STATUSDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline ToDoList::NewDataSet::STATUSRow^  NewDataSet::STATUSDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<ToDoList::NewDataSet::STATUSRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::STATUSDataTable::AddSTATUSRow(ToDoList::NewDataSet::STATUSRow^  row) {
        this->Rows->Add(row);
    }
    
    inline ToDoList::NewDataSet::STATUSRow^  NewDataSet::STATUSDataTable::AddSTATUSRow(
                System::String^  STATUS9, 
                System::String^  STATUS8, 
                System::String^  STATUS7, 
                System::String^  STATUS6, 
                System::String^  STATUS5, 
                System::String^  STATUS4, 
                System::String^  STATUS3, 
                System::String^  STATUS2, 
                System::String^  STATUS1, 
                System::String^  STATUS0, 
                ToDoList::NewDataSet::TODOLISTRow^  parentTODOLISTRowByTODOLIST_STATUS) {
        ToDoList::NewDataSet::STATUSRow^  rowSTATUSRow = (cli::safe_cast<ToDoList::NewDataSet::STATUSRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(11) {STATUS9, STATUS8, STATUS7, 
            STATUS6, STATUS5, STATUS4, STATUS3, STATUS2, STATUS1, STATUS0, nullptr};
        if (parentTODOLISTRowByTODOLIST_STATUS != nullptr) {
            columnValuesArray[10] = parentTODOLISTRowByTODOLIST_STATUS[8];
        }
        rowSTATUSRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowSTATUSRow);
        return rowSTATUSRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::STATUSDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::STATUSDataTable::Clone() {
        ToDoList::NewDataSet::STATUSDataTable^  cln = (cli::safe_cast<ToDoList::NewDataSet::STATUSDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::STATUSDataTable::CreateInstance() {
        return (gcnew ToDoList::NewDataSet::STATUSDataTable());
    }
    
    inline ::System::Void NewDataSet::STATUSDataTable::InitVars() {
        this->columnSTATUS9 = __super::Columns[L"STATUS9"];
        this->columnSTATUS8 = __super::Columns[L"STATUS8"];
        this->columnSTATUS7 = __super::Columns[L"STATUS7"];
        this->columnSTATUS6 = __super::Columns[L"STATUS6"];
        this->columnSTATUS5 = __super::Columns[L"STATUS5"];
        this->columnSTATUS4 = __super::Columns[L"STATUS4"];
        this->columnSTATUS3 = __super::Columns[L"STATUS3"];
        this->columnSTATUS2 = __super::Columns[L"STATUS2"];
        this->columnSTATUS1 = __super::Columns[L"STATUS1"];
        this->columnSTATUS0 = __super::Columns[L"STATUS0"];
        this->columnTODOLIST_Id = __super::Columns[L"TODOLIST_Id"];
    }
    
    inline ::System::Void NewDataSet::STATUSDataTable::InitClass() {
        this->columnSTATUS9 = (gcnew ::System::Data::DataColumn(L"STATUS9", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnSTATUS9);
        this->columnSTATUS8 = (gcnew ::System::Data::DataColumn(L"STATUS8", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnSTATUS8);
        this->columnSTATUS7 = (gcnew ::System::Data::DataColumn(L"STATUS7", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnSTATUS7);
        this->columnSTATUS6 = (gcnew ::System::Data::DataColumn(L"STATUS6", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnSTATUS6);
        this->columnSTATUS5 = (gcnew ::System::Data::DataColumn(L"STATUS5", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnSTATUS5);
        this->columnSTATUS4 = (gcnew ::System::Data::DataColumn(L"STATUS4", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnSTATUS4);
        this->columnSTATUS3 = (gcnew ::System::Data::DataColumn(L"STATUS3", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnSTATUS3);
        this->columnSTATUS2 = (gcnew ::System::Data::DataColumn(L"STATUS2", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnSTATUS2);
        this->columnSTATUS1 = (gcnew ::System::Data::DataColumn(L"STATUS1", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnSTATUS1);
        this->columnSTATUS0 = (gcnew ::System::Data::DataColumn(L"STATUS0", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnSTATUS0);
        this->columnTODOLIST_Id = (gcnew ::System::Data::DataColumn(L"TODOLIST_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnTODOLIST_Id);
        this->columnSTATUS9->Namespace = L"";
        this->columnSTATUS8->Namespace = L"";
        this->columnSTATUS7->Namespace = L"";
        this->columnSTATUS6->Namespace = L"";
        this->columnSTATUS5->Namespace = L"";
        this->columnSTATUS4->Namespace = L"";
        this->columnSTATUS3->Namespace = L"";
        this->columnSTATUS2->Namespace = L"";
        this->columnSTATUS1->Namespace = L"";
        this->columnSTATUS0->AllowDBNull = false;
        this->columnSTATUS0->Namespace = L"";
    }
    
    inline ToDoList::NewDataSet::STATUSRow^  NewDataSet::STATUSDataTable::NewSTATUSRow() {
        return (cli::safe_cast<ToDoList::NewDataSet::STATUSRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::STATUSDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew ToDoList::NewDataSet::STATUSRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::STATUSDataTable::GetRowType() {
        return ToDoList::NewDataSet::STATUSRow::typeid;
    }
    
    inline ::System::Void NewDataSet::STATUSDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->STATUSRowChanged(this, (gcnew ToDoList::NewDataSet::STATUSRowChangeEvent((cli::safe_cast<ToDoList::NewDataSet::STATUSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::STATUSDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->STATUSRowChanging(this, (gcnew ToDoList::NewDataSet::STATUSRowChangeEvent((cli::safe_cast<ToDoList::NewDataSet::STATUSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::STATUSDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->STATUSRowDeleted(this, (gcnew ToDoList::NewDataSet::STATUSRowChangeEvent((cli::safe_cast<ToDoList::NewDataSet::STATUSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::STATUSDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->STATUSRowDeleting(this, (gcnew ToDoList::NewDataSet::STATUSRowChangeEvent((cli::safe_cast<ToDoList::NewDataSet::STATUSRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::STATUSDataTable::RemoveSTATUSRow(ToDoList::NewDataSet::STATUSRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::STATUSDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        ToDoList::NewDataSet^  ds = (gcnew ToDoList::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"STATUSDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::PERSONDataTable::PERSONDataTable() {
        this->TableName = L"PERSON";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::PERSONDataTable::PERSONDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::PERSONDataTable::PERSONDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::PERSONDataTable::PERSON9Column::get() {
        return this->columnPERSON9;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::PERSONDataTable::PERSON8Column::get() {
        return this->columnPERSON8;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::PERSONDataTable::PERSON7Column::get() {
        return this->columnPERSON7;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::PERSONDataTable::PERSON6Column::get() {
        return this->columnPERSON6;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::PERSONDataTable::PERSON5Column::get() {
        return this->columnPERSON5;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::PERSONDataTable::PERSON4Column::get() {
        return this->columnPERSON4;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::PERSONDataTable::PERSON3Column::get() {
        return this->columnPERSON3;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::PERSONDataTable::PERSON2Column::get() {
        return this->columnPERSON2;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::PERSONDataTable::PERSON1Column::get() {
        return this->columnPERSON1;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::PERSONDataTable::PERSON0Column::get() {
        return this->columnPERSON0;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::PERSONDataTable::TODOLIST_IdColumn::get() {
        return this->columnTODOLIST_Id;
    }
    
    inline ::System::Int32 NewDataSet::PERSONDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline ToDoList::NewDataSet::PERSONRow^  NewDataSet::PERSONDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<ToDoList::NewDataSet::PERSONRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::PERSONDataTable::AddPERSONRow(ToDoList::NewDataSet::PERSONRow^  row) {
        this->Rows->Add(row);
    }
    
    inline ToDoList::NewDataSet::PERSONRow^  NewDataSet::PERSONDataTable::AddPERSONRow(
                System::String^  PERSON9, 
                System::String^  PERSON8, 
                System::String^  PERSON7, 
                System::String^  PERSON6, 
                System::String^  PERSON5, 
                System::String^  PERSON4, 
                System::String^  PERSON3, 
                System::String^  PERSON2, 
                System::String^  PERSON1, 
                System::String^  PERSON0, 
                ToDoList::NewDataSet::TODOLISTRow^  parentTODOLISTRowByTODOLIST_PERSON) {
        ToDoList::NewDataSet::PERSONRow^  rowPERSONRow = (cli::safe_cast<ToDoList::NewDataSet::PERSONRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(11) {PERSON9, PERSON8, PERSON7, 
            PERSON6, PERSON5, PERSON4, PERSON3, PERSON2, PERSON1, PERSON0, nullptr};
        if (parentTODOLISTRowByTODOLIST_PERSON != nullptr) {
            columnValuesArray[10] = parentTODOLISTRowByTODOLIST_PERSON[8];
        }
        rowPERSONRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowPERSONRow);
        return rowPERSONRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::PERSONDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::PERSONDataTable::Clone() {
        ToDoList::NewDataSet::PERSONDataTable^  cln = (cli::safe_cast<ToDoList::NewDataSet::PERSONDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::PERSONDataTable::CreateInstance() {
        return (gcnew ToDoList::NewDataSet::PERSONDataTable());
    }
    
    inline ::System::Void NewDataSet::PERSONDataTable::InitVars() {
        this->columnPERSON9 = __super::Columns[L"PERSON9"];
        this->columnPERSON8 = __super::Columns[L"PERSON8"];
        this->columnPERSON7 = __super::Columns[L"PERSON7"];
        this->columnPERSON6 = __super::Columns[L"PERSON6"];
        this->columnPERSON5 = __super::Columns[L"PERSON5"];
        this->columnPERSON4 = __super::Columns[L"PERSON4"];
        this->columnPERSON3 = __super::Columns[L"PERSON3"];
        this->columnPERSON2 = __super::Columns[L"PERSON2"];
        this->columnPERSON1 = __super::Columns[L"PERSON1"];
        this->columnPERSON0 = __super::Columns[L"PERSON0"];
        this->columnTODOLIST_Id = __super::Columns[L"TODOLIST_Id"];
    }
    
    inline ::System::Void NewDataSet::PERSONDataTable::InitClass() {
        this->columnPERSON9 = (gcnew ::System::Data::DataColumn(L"PERSON9", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnPERSON9);
        this->columnPERSON8 = (gcnew ::System::Data::DataColumn(L"PERSON8", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnPERSON8);
        this->columnPERSON7 = (gcnew ::System::Data::DataColumn(L"PERSON7", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnPERSON7);
        this->columnPERSON6 = (gcnew ::System::Data::DataColumn(L"PERSON6", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnPERSON6);
        this->columnPERSON5 = (gcnew ::System::Data::DataColumn(L"PERSON5", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnPERSON5);
        this->columnPERSON4 = (gcnew ::System::Data::DataColumn(L"PERSON4", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnPERSON4);
        this->columnPERSON3 = (gcnew ::System::Data::DataColumn(L"PERSON3", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnPERSON3);
        this->columnPERSON2 = (gcnew ::System::Data::DataColumn(L"PERSON2", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnPERSON2);
        this->columnPERSON1 = (gcnew ::System::Data::DataColumn(L"PERSON1", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnPERSON1);
        this->columnPERSON0 = (gcnew ::System::Data::DataColumn(L"PERSON0", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnPERSON0);
        this->columnTODOLIST_Id = (gcnew ::System::Data::DataColumn(L"TODOLIST_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnTODOLIST_Id);
        this->columnPERSON9->Namespace = L"";
        this->columnPERSON8->Namespace = L"";
        this->columnPERSON7->Namespace = L"";
        this->columnPERSON6->Namespace = L"";
        this->columnPERSON5->Namespace = L"";
        this->columnPERSON4->Namespace = L"";
        this->columnPERSON3->Namespace = L"";
        this->columnPERSON2->Namespace = L"";
        this->columnPERSON1->Namespace = L"";
        this->columnPERSON0->AllowDBNull = false;
        this->columnPERSON0->Namespace = L"";
    }
    
    inline ToDoList::NewDataSet::PERSONRow^  NewDataSet::PERSONDataTable::NewPERSONRow() {
        return (cli::safe_cast<ToDoList::NewDataSet::PERSONRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::PERSONDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew ToDoList::NewDataSet::PERSONRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::PERSONDataTable::GetRowType() {
        return ToDoList::NewDataSet::PERSONRow::typeid;
    }
    
    inline ::System::Void NewDataSet::PERSONDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->PERSONRowChanged(this, (gcnew ToDoList::NewDataSet::PERSONRowChangeEvent((cli::safe_cast<ToDoList::NewDataSet::PERSONRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::PERSONDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->PERSONRowChanging(this, (gcnew ToDoList::NewDataSet::PERSONRowChangeEvent((cli::safe_cast<ToDoList::NewDataSet::PERSONRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::PERSONDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->PERSONRowDeleted(this, (gcnew ToDoList::NewDataSet::PERSONRowChangeEvent((cli::safe_cast<ToDoList::NewDataSet::PERSONRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::PERSONDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->PERSONRowDeleting(this, (gcnew ToDoList::NewDataSet::PERSONRowChangeEvent((cli::safe_cast<ToDoList::NewDataSet::PERSONRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::PERSONDataTable::RemovePERSONRow(ToDoList::NewDataSet::PERSONRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::PERSONDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        ToDoList::NewDataSet^  ds = (gcnew ToDoList::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"PERSONDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::ALLOCATEDBYDataTable::ALLOCATEDBYDataTable() {
        this->TableName = L"ALLOCATEDBY";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::ALLOCATEDBYDataTable::ALLOCATEDBYDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::ALLOCATEDBYDataTable::ALLOCATEDBYDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ALLOCATEDBYDataTable::ALLOCATEDBY9Column::get() {
        return this->columnALLOCATEDBY9;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ALLOCATEDBYDataTable::ALLOCATEDBY8Column::get() {
        return this->columnALLOCATEDBY8;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ALLOCATEDBYDataTable::ALLOCATEDBY7Column::get() {
        return this->columnALLOCATEDBY7;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ALLOCATEDBYDataTable::ALLOCATEDBY6Column::get() {
        return this->columnALLOCATEDBY6;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ALLOCATEDBYDataTable::ALLOCATEDBY5Column::get() {
        return this->columnALLOCATEDBY5;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ALLOCATEDBYDataTable::ALLOCATEDBY4Column::get() {
        return this->columnALLOCATEDBY4;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ALLOCATEDBYDataTable::ALLOCATEDBY3Column::get() {
        return this->columnALLOCATEDBY3;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ALLOCATEDBYDataTable::ALLOCATEDBY2Column::get() {
        return this->columnALLOCATEDBY2;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ALLOCATEDBYDataTable::ALLOCATEDBY1Column::get() {
        return this->columnALLOCATEDBY1;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ALLOCATEDBYDataTable::ALLOCATEDBY0Column::get() {
        return this->columnALLOCATEDBY0;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ALLOCATEDBYDataTable::TODOLIST_IdColumn::get() {
        return this->columnTODOLIST_Id;
    }
    
    inline ::System::Int32 NewDataSet::ALLOCATEDBYDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline ToDoList::NewDataSet::ALLOCATEDBYRow^  NewDataSet::ALLOCATEDBYDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<ToDoList::NewDataSet::ALLOCATEDBYRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::ALLOCATEDBYDataTable::AddALLOCATEDBYRow(ToDoList::NewDataSet::ALLOCATEDBYRow^  row) {
        this->Rows->Add(row);
    }
    
    inline ToDoList::NewDataSet::ALLOCATEDBYRow^  NewDataSet::ALLOCATEDBYDataTable::AddALLOCATEDBYRow(
                System::String^  ALLOCATEDBY9, 
                System::String^  ALLOCATEDBY8, 
                System::String^  ALLOCATEDBY7, 
                System::String^  ALLOCATEDBY6, 
                System::String^  ALLOCATEDBY5, 
                System::String^  ALLOCATEDBY4, 
                System::String^  ALLOCATEDBY3, 
                System::String^  ALLOCATEDBY2, 
                System::String^  ALLOCATEDBY1, 
                System::String^  ALLOCATEDBY0, 
                ToDoList::NewDataSet::TODOLISTRow^  parentTODOLISTRowByTODOLIST_ALLOCATEDBY) {
        ToDoList::NewDataSet::ALLOCATEDBYRow^  rowALLOCATEDBYRow = (cli::safe_cast<ToDoList::NewDataSet::ALLOCATEDBYRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(11) {ALLOCATEDBY9, ALLOCATEDBY8, 
            ALLOCATEDBY7, ALLOCATEDBY6, ALLOCATEDBY5, ALLOCATEDBY4, ALLOCATEDBY3, ALLOCATEDBY2, ALLOCATEDBY1, ALLOCATEDBY0, nullptr};
        if (parentTODOLISTRowByTODOLIST_ALLOCATEDBY != nullptr) {
            columnValuesArray[10] = parentTODOLISTRowByTODOLIST_ALLOCATEDBY[8];
        }
        rowALLOCATEDBYRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowALLOCATEDBYRow);
        return rowALLOCATEDBYRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::ALLOCATEDBYDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::ALLOCATEDBYDataTable::Clone() {
        ToDoList::NewDataSet::ALLOCATEDBYDataTable^  cln = (cli::safe_cast<ToDoList::NewDataSet::ALLOCATEDBYDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::ALLOCATEDBYDataTable::CreateInstance() {
        return (gcnew ToDoList::NewDataSet::ALLOCATEDBYDataTable());
    }
    
    inline ::System::Void NewDataSet::ALLOCATEDBYDataTable::InitVars() {
        this->columnALLOCATEDBY9 = __super::Columns[L"ALLOCATEDBY9"];
        this->columnALLOCATEDBY8 = __super::Columns[L"ALLOCATEDBY8"];
        this->columnALLOCATEDBY7 = __super::Columns[L"ALLOCATEDBY7"];
        this->columnALLOCATEDBY6 = __super::Columns[L"ALLOCATEDBY6"];
        this->columnALLOCATEDBY5 = __super::Columns[L"ALLOCATEDBY5"];
        this->columnALLOCATEDBY4 = __super::Columns[L"ALLOCATEDBY4"];
        this->columnALLOCATEDBY3 = __super::Columns[L"ALLOCATEDBY3"];
        this->columnALLOCATEDBY2 = __super::Columns[L"ALLOCATEDBY2"];
        this->columnALLOCATEDBY1 = __super::Columns[L"ALLOCATEDBY1"];
        this->columnALLOCATEDBY0 = __super::Columns[L"ALLOCATEDBY0"];
        this->columnTODOLIST_Id = __super::Columns[L"TODOLIST_Id"];
    }
    
    inline ::System::Void NewDataSet::ALLOCATEDBYDataTable::InitClass() {
        this->columnALLOCATEDBY9 = (gcnew ::System::Data::DataColumn(L"ALLOCATEDBY9", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnALLOCATEDBY9);
        this->columnALLOCATEDBY8 = (gcnew ::System::Data::DataColumn(L"ALLOCATEDBY8", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnALLOCATEDBY8);
        this->columnALLOCATEDBY7 = (gcnew ::System::Data::DataColumn(L"ALLOCATEDBY7", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnALLOCATEDBY7);
        this->columnALLOCATEDBY6 = (gcnew ::System::Data::DataColumn(L"ALLOCATEDBY6", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnALLOCATEDBY6);
        this->columnALLOCATEDBY5 = (gcnew ::System::Data::DataColumn(L"ALLOCATEDBY5", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnALLOCATEDBY5);
        this->columnALLOCATEDBY4 = (gcnew ::System::Data::DataColumn(L"ALLOCATEDBY4", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnALLOCATEDBY4);
        this->columnALLOCATEDBY3 = (gcnew ::System::Data::DataColumn(L"ALLOCATEDBY3", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnALLOCATEDBY3);
        this->columnALLOCATEDBY2 = (gcnew ::System::Data::DataColumn(L"ALLOCATEDBY2", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnALLOCATEDBY2);
        this->columnALLOCATEDBY1 = (gcnew ::System::Data::DataColumn(L"ALLOCATEDBY1", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnALLOCATEDBY1);
        this->columnALLOCATEDBY0 = (gcnew ::System::Data::DataColumn(L"ALLOCATEDBY0", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnALLOCATEDBY0);
        this->columnTODOLIST_Id = (gcnew ::System::Data::DataColumn(L"TODOLIST_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnTODOLIST_Id);
        this->columnALLOCATEDBY9->Namespace = L"";
        this->columnALLOCATEDBY8->Namespace = L"";
        this->columnALLOCATEDBY7->Namespace = L"";
        this->columnALLOCATEDBY6->Namespace = L"";
        this->columnALLOCATEDBY5->Namespace = L"";
        this->columnALLOCATEDBY4->Namespace = L"";
        this->columnALLOCATEDBY3->Namespace = L"";
        this->columnALLOCATEDBY2->Namespace = L"";
        this->columnALLOCATEDBY1->Namespace = L"";
        this->columnALLOCATEDBY0->AllowDBNull = false;
        this->columnALLOCATEDBY0->Namespace = L"";
    }
    
    inline ToDoList::NewDataSet::ALLOCATEDBYRow^  NewDataSet::ALLOCATEDBYDataTable::NewALLOCATEDBYRow() {
        return (cli::safe_cast<ToDoList::NewDataSet::ALLOCATEDBYRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::ALLOCATEDBYDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew ToDoList::NewDataSet::ALLOCATEDBYRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::ALLOCATEDBYDataTable::GetRowType() {
        return ToDoList::NewDataSet::ALLOCATEDBYRow::typeid;
    }
    
    inline ::System::Void NewDataSet::ALLOCATEDBYDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->ALLOCATEDBYRowChanged(this, (gcnew ToDoList::NewDataSet::ALLOCATEDBYRowChangeEvent((cli::safe_cast<ToDoList::NewDataSet::ALLOCATEDBYRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ALLOCATEDBYDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->ALLOCATEDBYRowChanging(this, (gcnew ToDoList::NewDataSet::ALLOCATEDBYRowChangeEvent((cli::safe_cast<ToDoList::NewDataSet::ALLOCATEDBYRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ALLOCATEDBYDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->ALLOCATEDBYRowDeleted(this, (gcnew ToDoList::NewDataSet::ALLOCATEDBYRowChangeEvent((cli::safe_cast<ToDoList::NewDataSet::ALLOCATEDBYRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ALLOCATEDBYDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->ALLOCATEDBYRowDeleting(this, (gcnew ToDoList::NewDataSet::ALLOCATEDBYRowChangeEvent((cli::safe_cast<ToDoList::NewDataSet::ALLOCATEDBYRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ALLOCATEDBYDataTable::RemoveALLOCATEDBYRow(ToDoList::NewDataSet::ALLOCATEDBYRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::ALLOCATEDBYDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        ToDoList::NewDataSet^  ds = (gcnew ToDoList::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"ALLOCATEDBYDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::VERSIONDataTable::VERSIONDataTable() {
        this->TableName = L"VERSION";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::VERSIONDataTable::VERSIONDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::VERSIONDataTable::VERSIONDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::VERSIONDataTable::VERSION9Column::get() {
        return this->columnVERSION9;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::VERSIONDataTable::VERSION8Column::get() {
        return this->columnVERSION8;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::VERSIONDataTable::VERSION7Column::get() {
        return this->columnVERSION7;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::VERSIONDataTable::VERSION6Column::get() {
        return this->columnVERSION6;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::VERSIONDataTable::VERSION5Column::get() {
        return this->columnVERSION5;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::VERSIONDataTable::VERSION4Column::get() {
        return this->columnVERSION4;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::VERSIONDataTable::VERSION3Column::get() {
        return this->columnVERSION3;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::VERSIONDataTable::VERSION2Column::get() {
        return this->columnVERSION2;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::VERSIONDataTable::VERSION1Column::get() {
        return this->columnVERSION1;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::VERSIONDataTable::VERSION0Column::get() {
        return this->columnVERSION0;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::VERSIONDataTable::TODOLIST_IdColumn::get() {
        return this->columnTODOLIST_Id;
    }
    
    inline ::System::Int32 NewDataSet::VERSIONDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline ToDoList::NewDataSet::VERSIONRow^  NewDataSet::VERSIONDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<ToDoList::NewDataSet::VERSIONRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::VERSIONDataTable::AddVERSIONRow(ToDoList::NewDataSet::VERSIONRow^  row) {
        this->Rows->Add(row);
    }
    
    inline ToDoList::NewDataSet::VERSIONRow^  NewDataSet::VERSIONDataTable::AddVERSIONRow(
                System::String^  VERSION9, 
                System::String^  VERSION8, 
                System::String^  VERSION7, 
                System::String^  VERSION6, 
                System::String^  VERSION5, 
                System::String^  VERSION4, 
                System::String^  VERSION3, 
                System::String^  VERSION2, 
                System::String^  VERSION1, 
                System::String^  VERSION0, 
                ToDoList::NewDataSet::TODOLISTRow^  parentTODOLISTRowByTODOLIST_VERSION) {
        ToDoList::NewDataSet::VERSIONRow^  rowVERSIONRow = (cli::safe_cast<ToDoList::NewDataSet::VERSIONRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(11) {VERSION9, VERSION8, 
            VERSION7, VERSION6, VERSION5, VERSION4, VERSION3, VERSION2, VERSION1, VERSION0, nullptr};
        if (parentTODOLISTRowByTODOLIST_VERSION != nullptr) {
            columnValuesArray[10] = parentTODOLISTRowByTODOLIST_VERSION[8];
        }
        rowVERSIONRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowVERSIONRow);
        return rowVERSIONRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::VERSIONDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::VERSIONDataTable::Clone() {
        ToDoList::NewDataSet::VERSIONDataTable^  cln = (cli::safe_cast<ToDoList::NewDataSet::VERSIONDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::VERSIONDataTable::CreateInstance() {
        return (gcnew ToDoList::NewDataSet::VERSIONDataTable());
    }
    
    inline ::System::Void NewDataSet::VERSIONDataTable::InitVars() {
        this->columnVERSION9 = __super::Columns[L"VERSION9"];
        this->columnVERSION8 = __super::Columns[L"VERSION8"];
        this->columnVERSION7 = __super::Columns[L"VERSION7"];
        this->columnVERSION6 = __super::Columns[L"VERSION6"];
        this->columnVERSION5 = __super::Columns[L"VERSION5"];
        this->columnVERSION4 = __super::Columns[L"VERSION4"];
        this->columnVERSION3 = __super::Columns[L"VERSION3"];
        this->columnVERSION2 = __super::Columns[L"VERSION2"];
        this->columnVERSION1 = __super::Columns[L"VERSION1"];
        this->columnVERSION0 = __super::Columns[L"VERSION0"];
        this->columnTODOLIST_Id = __super::Columns[L"TODOLIST_Id"];
    }
    
    inline ::System::Void NewDataSet::VERSIONDataTable::InitClass() {
        this->columnVERSION9 = (gcnew ::System::Data::DataColumn(L"VERSION9", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnVERSION9);
        this->columnVERSION8 = (gcnew ::System::Data::DataColumn(L"VERSION8", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnVERSION8);
        this->columnVERSION7 = (gcnew ::System::Data::DataColumn(L"VERSION7", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnVERSION7);
        this->columnVERSION6 = (gcnew ::System::Data::DataColumn(L"VERSION6", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnVERSION6);
        this->columnVERSION5 = (gcnew ::System::Data::DataColumn(L"VERSION5", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnVERSION5);
        this->columnVERSION4 = (gcnew ::System::Data::DataColumn(L"VERSION4", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnVERSION4);
        this->columnVERSION3 = (gcnew ::System::Data::DataColumn(L"VERSION3", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnVERSION3);
        this->columnVERSION2 = (gcnew ::System::Data::DataColumn(L"VERSION2", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnVERSION2);
        this->columnVERSION1 = (gcnew ::System::Data::DataColumn(L"VERSION1", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnVERSION1);
        this->columnVERSION0 = (gcnew ::System::Data::DataColumn(L"VERSION0", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnVERSION0);
        this->columnTODOLIST_Id = (gcnew ::System::Data::DataColumn(L"TODOLIST_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnTODOLIST_Id);
        this->columnVERSION9->Namespace = L"";
        this->columnVERSION8->Namespace = L"";
        this->columnVERSION7->Namespace = L"";
        this->columnVERSION6->Namespace = L"";
        this->columnVERSION5->Namespace = L"";
        this->columnVERSION4->Namespace = L"";
        this->columnVERSION3->Namespace = L"";
        this->columnVERSION2->Namespace = L"";
        this->columnVERSION1->Namespace = L"";
        this->columnVERSION0->AllowDBNull = false;
        this->columnVERSION0->Namespace = L"";
    }
    
    inline ToDoList::NewDataSet::VERSIONRow^  NewDataSet::VERSIONDataTable::NewVERSIONRow() {
        return (cli::safe_cast<ToDoList::NewDataSet::VERSIONRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::VERSIONDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew ToDoList::NewDataSet::VERSIONRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::VERSIONDataTable::GetRowType() {
        return ToDoList::NewDataSet::VERSIONRow::typeid;
    }
    
    inline ::System::Void NewDataSet::VERSIONDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->VERSIONRowChanged(this, (gcnew ToDoList::NewDataSet::VERSIONRowChangeEvent((cli::safe_cast<ToDoList::NewDataSet::VERSIONRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::VERSIONDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->VERSIONRowChanging(this, (gcnew ToDoList::NewDataSet::VERSIONRowChangeEvent((cli::safe_cast<ToDoList::NewDataSet::VERSIONRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::VERSIONDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->VERSIONRowDeleted(this, (gcnew ToDoList::NewDataSet::VERSIONRowChangeEvent((cli::safe_cast<ToDoList::NewDataSet::VERSIONRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::VERSIONDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->VERSIONRowDeleting(this, (gcnew ToDoList::NewDataSet::VERSIONRowChangeEvent((cli::safe_cast<ToDoList::NewDataSet::VERSIONRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::VERSIONDataTable::RemoveVERSIONRow(ToDoList::NewDataSet::VERSIONRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::VERSIONDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        ToDoList::NewDataSet^  ds = (gcnew ToDoList::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"VERSIONDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::TODOLISTRow::TODOLISTRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableTODOLIST = (cli::safe_cast<ToDoList::NewDataSet::TODOLISTDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::TODOLISTRow::CUSTOMCOMMENTSTYPE::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTODOLIST->CUSTOMCOMMENTSTYPEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CUSTOMCOMMENTSTYPE\' in table \'TODOLIST\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TODOLISTRow::CUSTOMCOMMENTSTYPE::set(System::String^  value) {
        this[this->tableTODOLIST->CUSTOMCOMMENTSTYPEColumn] = value;
    }
    
    inline System::String^  NewDataSet::TODOLISTRow::PROJECTNAME::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTODOLIST->PROJECTNAMEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PROJECTNAME\' in table \'TODOLIST\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TODOLISTRow::PROJECTNAME::set(System::String^  value) {
        this[this->tableTODOLIST->PROJECTNAMEColumn] = value;
    }
    
    inline System::String^  NewDataSet::TODOLISTRow::NEXTUNIQUEID::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTODOLIST->NEXTUNIQUEIDColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'NEXTUNIQUEID\' in table \'TODOLIST\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TODOLISTRow::NEXTUNIQUEID::set(System::String^  value) {
        this[this->tableTODOLIST->NEXTUNIQUEIDColumn] = value;
    }
    
    inline System::String^  NewDataSet::TODOLISTRow::LASTMODIFIED::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTODOLIST->LASTMODIFIEDColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'LASTMODIFIED\' in table \'TODOLIST\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TODOLISTRow::LASTMODIFIED::set(System::String^  value) {
        this[this->tableTODOLIST->LASTMODIFIEDColumn] = value;
    }
    
    inline System::String^  NewDataSet::TODOLISTRow::FILEVERSION::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTODOLIST->FILEVERSIONColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'FILEVERSION\' in table \'TODOLIST\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TODOLISTRow::FILEVERSION::set(System::String^  value) {
        this[this->tableTODOLIST->FILEVERSIONColumn] = value;
    }
    
    inline System::String^  NewDataSet::TODOLISTRow::FILENAME::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTODOLIST->FILENAMEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'FILENAME\' in table \'TODOLIST\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TODOLISTRow::FILENAME::set(System::String^  value) {
        this[this->tableTODOLIST->FILENAMEColumn] = value;
    }
    
    inline System::String^  NewDataSet::TODOLISTRow::FILEFORMAT::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTODOLIST->FILEFORMATColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'FILEFORMAT\' in table \'TODOLIST\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TODOLISTRow::FILEFORMAT::set(System::String^  value) {
        this[this->tableTODOLIST->FILEFORMATColumn] = value;
    }
    
    inline System::String^  NewDataSet::TODOLISTRow::EARLIESTDUEDATE::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTODOLIST->EARLIESTDUEDATEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'EARLIESTDUEDATE\' in table \'TODOLIST\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TODOLISTRow::EARLIESTDUEDATE::set(System::String^  value) {
        this[this->tableTODOLIST->EARLIESTDUEDATEColumn] = value;
    }
    
    inline System::Int32 NewDataSet::TODOLISTRow::TODOLIST_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tableTODOLIST->TODOLIST_IdColumn]));
    }
    inline System::Void NewDataSet::TODOLISTRow::TODOLIST_Id::set(System::Int32 value) {
        this[this->tableTODOLIST->TODOLIST_IdColumn] = value;
    }
    
    inline ::System::Boolean NewDataSet::TODOLISTRow::IsCUSTOMCOMMENTSTYPENull() {
        return this->IsNull(this->tableTODOLIST->CUSTOMCOMMENTSTYPEColumn);
    }
    
    inline ::System::Void NewDataSet::TODOLISTRow::SetCUSTOMCOMMENTSTYPENull() {
        this[this->tableTODOLIST->CUSTOMCOMMENTSTYPEColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TODOLISTRow::IsPROJECTNAMENull() {
        return this->IsNull(this->tableTODOLIST->PROJECTNAMEColumn);
    }
    
    inline ::System::Void NewDataSet::TODOLISTRow::SetPROJECTNAMENull() {
        this[this->tableTODOLIST->PROJECTNAMEColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TODOLISTRow::IsNEXTUNIQUEIDNull() {
        return this->IsNull(this->tableTODOLIST->NEXTUNIQUEIDColumn);
    }
    
    inline ::System::Void NewDataSet::TODOLISTRow::SetNEXTUNIQUEIDNull() {
        this[this->tableTODOLIST->NEXTUNIQUEIDColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TODOLISTRow::IsLASTMODIFIEDNull() {
        return this->IsNull(this->tableTODOLIST->LASTMODIFIEDColumn);
    }
    
    inline ::System::Void NewDataSet::TODOLISTRow::SetLASTMODIFIEDNull() {
        this[this->tableTODOLIST->LASTMODIFIEDColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TODOLISTRow::IsFILEVERSIONNull() {
        return this->IsNull(this->tableTODOLIST->FILEVERSIONColumn);
    }
    
    inline ::System::Void NewDataSet::TODOLISTRow::SetFILEVERSIONNull() {
        this[this->tableTODOLIST->FILEVERSIONColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TODOLISTRow::IsFILENAMENull() {
        return this->IsNull(this->tableTODOLIST->FILENAMEColumn);
    }
    
    inline ::System::Void NewDataSet::TODOLISTRow::SetFILENAMENull() {
        this[this->tableTODOLIST->FILENAMEColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TODOLISTRow::IsFILEFORMATNull() {
        return this->IsNull(this->tableTODOLIST->FILEFORMATColumn);
    }
    
    inline ::System::Void NewDataSet::TODOLISTRow::SetFILEFORMATNull() {
        this[this->tableTODOLIST->FILEFORMATColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TODOLISTRow::IsEARLIESTDUEDATENull() {
        return this->IsNull(this->tableTODOLIST->EARLIESTDUEDATEColumn);
    }
    
    inline ::System::Void NewDataSet::TODOLISTRow::SetEARLIESTDUEDATENull() {
        this[this->tableTODOLIST->EARLIESTDUEDATEColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< ToDoList::NewDataSet::TASKRow^  >^  NewDataSet::TODOLISTRow::GetTASKRows() {
        if (this->Table->ChildRelations[L"TODOLIST_TASK"] == nullptr) {
            return gcnew cli::array< ToDoList::NewDataSet::TASKRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< ToDoList::NewDataSet::TASKRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"TODOLIST_TASK"])));
        }
    }
    
    inline cli::array< ToDoList::NewDataSet::CATEGORYRow^  >^  NewDataSet::TODOLISTRow::GetCATEGORYRows() {
        if (this->Table->ChildRelations[L"TODOLIST_CATEGORY"] == nullptr) {
            return gcnew cli::array< ToDoList::NewDataSet::CATEGORYRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< ToDoList::NewDataSet::CATEGORYRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"TODOLIST_CATEGORY"])));
        }
    }
    
    inline cli::array< ToDoList::NewDataSet::STATUSRow^  >^  NewDataSet::TODOLISTRow::GetSTATUSRows() {
        if (this->Table->ChildRelations[L"TODOLIST_STATUS"] == nullptr) {
            return gcnew cli::array< ToDoList::NewDataSet::STATUSRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< ToDoList::NewDataSet::STATUSRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"TODOLIST_STATUS"])));
        }
    }
    
    inline cli::array< ToDoList::NewDataSet::PERSONRow^  >^  NewDataSet::TODOLISTRow::GetPERSONRows() {
        if (this->Table->ChildRelations[L"TODOLIST_PERSON"] == nullptr) {
            return gcnew cli::array< ToDoList::NewDataSet::PERSONRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< ToDoList::NewDataSet::PERSONRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"TODOLIST_PERSON"])));
        }
    }
    
    inline cli::array< ToDoList::NewDataSet::ALLOCATEDBYRow^  >^  NewDataSet::TODOLISTRow::GetALLOCATEDBYRows() {
        if (this->Table->ChildRelations[L"TODOLIST_ALLOCATEDBY"] == nullptr) {
            return gcnew cli::array< ToDoList::NewDataSet::ALLOCATEDBYRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< ToDoList::NewDataSet::ALLOCATEDBYRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"TODOLIST_ALLOCATEDBY"])));
        }
    }
    
    inline cli::array< ToDoList::NewDataSet::VERSIONRow^  >^  NewDataSet::TODOLISTRow::GetVERSIONRows() {
        if (this->Table->ChildRelations[L"TODOLIST_VERSION"] == nullptr) {
            return gcnew cli::array< ToDoList::NewDataSet::VERSIONRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< ToDoList::NewDataSet::VERSIONRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"TODOLIST_VERSION"])));
        }
    }
    
    
    inline NewDataSet::TASKRow::TASKRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableTASK = (cli::safe_cast<ToDoList::NewDataSet::TASKDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::TASKRow::ALLOCATEDBY::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->ALLOCATEDBYColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'ALLOCATEDBY\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::ALLOCATEDBY::set(System::String^  value) {
        this[this->tableTASK->ALLOCATEDBYColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::CALCCOST::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->CALCCOSTColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CALCCOST\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::CALCCOST::set(System::String^  value) {
        this[this->tableTASK->CALCCOSTColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::CALCPERCENTDONE::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->CALCPERCENTDONEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CALCPERCENTDONE\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::CALCPERCENTDONE::set(System::String^  value) {
        this[this->tableTASK->CALCPERCENTDONEColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::CALCTIMEESTIMATE::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->CALCTIMEESTIMATEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CALCTIMEESTIMATE\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::CALCTIMEESTIMATE::set(System::String^  value) {
        this[this->tableTASK->CALCTIMEESTIMATEColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::CALCTIMESPENT::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->CALCTIMESPENTColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CALCTIMESPENT\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::CALCTIMESPENT::set(System::String^  value) {
        this[this->tableTASK->CALCTIMESPENTColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::CATEGORY::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->CATEGORYColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CATEGORY\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::CATEGORY::set(System::String^  value) {
        this[this->tableTASK->CATEGORYColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::CATEGORY1::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->CATEGORY1Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CATEGORY1\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::CATEGORY1::set(System::String^  value) {
        this[this->tableTASK->CATEGORY1Column] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::CATEGORY2::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->CATEGORY2Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CATEGORY2\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::CATEGORY2::set(System::String^  value) {
        this[this->tableTASK->CATEGORY2Column] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::CATEGORY3::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->CATEGORY3Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CATEGORY3\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::CATEGORY3::set(System::String^  value) {
        this[this->tableTASK->CATEGORY3Column] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::CATEGORY4::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->CATEGORY4Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CATEGORY4\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::CATEGORY4::set(System::String^  value) {
        this[this->tableTASK->CATEGORY4Column] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::CATEGORY5::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->CATEGORY5Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CATEGORY5\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::CATEGORY5::set(System::String^  value) {
        this[this->tableTASK->CATEGORY5Column] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::CATEGORY6::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->CATEGORY6Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CATEGORY6\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::CATEGORY6::set(System::String^  value) {
        this[this->tableTASK->CATEGORY6Column] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::CATEGORY7::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->CATEGORY7Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CATEGORY7\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::CATEGORY7::set(System::String^  value) {
        this[this->tableTASK->CATEGORY7Column] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::CATEGORY8::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->CATEGORY8Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CATEGORY8\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::CATEGORY8::set(System::String^  value) {
        this[this->tableTASK->CATEGORY8Column] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::CATEGORY9::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->CATEGORY9Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CATEGORY9\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::CATEGORY9::set(System::String^  value) {
        this[this->tableTASK->CATEGORY9Column] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::COLOR::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->COLORColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'COLOR\' in table \'TASK\' is DBNull.", e));
        }
    }
    inline System::Void NewDataSet::TASKRow::COLOR::set(System::String^  value) {
        this[this->tableTASK->COLORColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::COMMENTS::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->COMMENTSColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'COMMENTS\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::COMMENTS::set(System::String^  value) {
        this[this->tableTASK->COMMENTSColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::COMMENTSTYPE::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->COMMENTSTYPEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'COMMENTSTYPE\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::COMMENTSTYPE::set(System::String^  value) {
        this[this->tableTASK->COMMENTSTYPEColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::COST::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->COSTColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'COST\' in table \'TASK\' is DBNull.", e));
        }
    }
    inline System::Void NewDataSet::TASKRow::COST::set(System::String^  value) {
        this[this->tableTASK->COSTColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::CREATIONDATE::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->CREATIONDATEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CREATIONDATE\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::CREATIONDATE::set(System::String^  value) {
        this[this->tableTASK->CREATIONDATEColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::CREATIONDATESTRING::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->CREATIONDATESTRINGColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CREATIONDATESTRING\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::CREATIONDATESTRING::set(System::String^  value) {
        this[this->tableTASK->CREATIONDATESTRINGColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::CUSTOMCOMMENTS::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->CUSTOMCOMMENTSColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CUSTOMCOMMENTS\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::CUSTOMCOMMENTS::set(System::String^  value) {
        this[this->tableTASK->CUSTOMCOMMENTSColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::DEPENDS::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->DEPENDSColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'DEPENDS\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::DEPENDS::set(System::String^  value) {
        this[this->tableTASK->DEPENDSColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::DEPENDS1::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->DEPENDS1Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'DEPENDS1\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::DEPENDS1::set(System::String^  value) {
        this[this->tableTASK->DEPENDS1Column] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::DEPENDS2::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->DEPENDS2Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'DEPENDS2\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::DEPENDS2::set(System::String^  value) {
        this[this->tableTASK->DEPENDS2Column] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::DEPENDS3::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->DEPENDS3Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'DEPENDS3\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::DEPENDS3::set(System::String^  value) {
        this[this->tableTASK->DEPENDS3Column] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::DEPENDS4::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->DEPENDS4Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'DEPENDS4\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::DEPENDS4::set(System::String^  value) {
        this[this->tableTASK->DEPENDS4Column] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::DEPENDS5::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->DEPENDS5Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'DEPENDS5\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::DEPENDS5::set(System::String^  value) {
        this[this->tableTASK->DEPENDS5Column] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::DEPENDS6::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->DEPENDS6Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'DEPENDS6\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::DEPENDS6::set(System::String^  value) {
        this[this->tableTASK->DEPENDS6Column] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::DEPENDS7::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->DEPENDS7Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'DEPENDS7\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::DEPENDS7::set(System::String^  value) {
        this[this->tableTASK->DEPENDS7Column] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::DEPENDS8::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->DEPENDS8Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'DEPENDS8\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::DEPENDS8::set(System::String^  value) {
        this[this->tableTASK->DEPENDS8Column] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::DEPENDS9::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->DEPENDS9Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'DEPENDS9\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::DEPENDS9::set(System::String^  value) {
        this[this->tableTASK->DEPENDS9Column] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::DONEDATE::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->DONEDATEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'DONEDATE\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::DONEDATE::set(System::String^  value) {
        this[this->tableTASK->DONEDATEColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::DONEDATESTRING::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->DONEDATESTRINGColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'DONEDATESTRING\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::DONEDATESTRING::set(System::String^  value) {
        this[this->tableTASK->DONEDATESTRINGColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::DUEDATE::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->DUEDATEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'DUEDATE\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::DUEDATE::set(System::String^  value) {
        this[this->tableTASK->DUEDATEColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::DUEDATESTRING::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->DUEDATESTRINGColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'DUEDATESTRING\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::DUEDATESTRING::set(System::String^  value) {
        this[this->tableTASK->DUEDATESTRINGColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::EXTERNALID::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->EXTERNALIDColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'EXTERNALID\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::EXTERNALID::set(System::String^  value) {
        this[this->tableTASK->EXTERNALIDColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::FILEREFPATH::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->FILEREFPATHColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'FILEREFPATH\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::FILEREFPATH::set(System::String^  value) {
        this[this->tableTASK->FILEREFPATHColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::FLAG::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->FLAGColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'FLAG\' in table \'TASK\' is DBNull.", e));
        }
    }
    inline System::Void NewDataSet::TASKRow::FLAG::set(System::String^  value) {
        this[this->tableTASK->FLAGColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::ICONINDEX::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->ICONINDEXColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'ICONINDEX\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::ICONINDEX::set(System::String^  value) {
        this[this->tableTASK->ICONINDEXColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::ID::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->IDColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'ID\' in table \'TASK\' is DBNull.", e));
        }
    }
    inline System::Void NewDataSet::TASKRow::ID::set(System::String^  value) {
        this[this->tableTASK->IDColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::LASTMOD::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->LASTMODColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'LASTMOD\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::LASTMOD::set(System::String^  value) {
        this[this->tableTASK->LASTMODColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::LASTMODSTRING::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->LASTMODSTRINGColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'LASTMODSTRING\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::LASTMODSTRING::set(System::String^  value) {
        this[this->tableTASK->LASTMODSTRINGColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::NUMCATEGORY::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->NUMCATEGORYColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'NUMCATEGORY\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::NUMCATEGORY::set(System::String^  value) {
        this[this->tableTASK->NUMCATEGORYColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::NUMDEPENDS::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->NUMDEPENDSColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'NUMDEPENDS\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::NUMDEPENDS::set(System::String^  value) {
        this[this->tableTASK->NUMDEPENDSColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::NUMPERSON::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->NUMPERSONColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'NUMPERSON\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::NUMPERSON::set(System::String^  value) {
        this[this->tableTASK->NUMPERSONColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::PERCENTDONE::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->PERCENTDONEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PERCENTDONE\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::PERCENTDONE::set(System::String^  value) {
        this[this->tableTASK->PERCENTDONEColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::PERSON::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->PERSONColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PERSON\' in table \'TASK\' is DBNull.", e));
        }
    }
    inline System::Void NewDataSet::TASKRow::PERSON::set(System::String^  value) {
        this[this->tableTASK->PERSONColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::PERSON1::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->PERSON1Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PERSON1\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::PERSON1::set(System::String^  value) {
        this[this->tableTASK->PERSON1Column] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::PERSON2::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->PERSON2Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PERSON2\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::PERSON2::set(System::String^  value) {
        this[this->tableTASK->PERSON2Column] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::PERSON3::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->PERSON3Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PERSON3\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::PERSON3::set(System::String^  value) {
        this[this->tableTASK->PERSON3Column] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::PERSON4::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->PERSON4Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PERSON4\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::PERSON4::set(System::String^  value) {
        this[this->tableTASK->PERSON4Column] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::PERSON5::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->PERSON5Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PERSON5\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::PERSON5::set(System::String^  value) {
        this[this->tableTASK->PERSON5Column] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::PERSON6::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->PERSON6Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PERSON6\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::PERSON6::set(System::String^  value) {
        this[this->tableTASK->PERSON6Column] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::PERSON7::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->PERSON7Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PERSON7\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::PERSON7::set(System::String^  value) {
        this[this->tableTASK->PERSON7Column] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::PERSON8::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->PERSON8Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PERSON8\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::PERSON8::set(System::String^  value) {
        this[this->tableTASK->PERSON8Column] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::PERSON9::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->PERSON9Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PERSON9\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::PERSON9::set(System::String^  value) {
        this[this->tableTASK->PERSON9Column] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::POS::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->POSColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'POS\' in table \'TASK\' is DBNull.", e));
        }
    }
    inline System::Void NewDataSet::TASKRow::POS::set(System::String^  value) {
        this[this->tableTASK->POSColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::PRIORITY::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->PRIORITYColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PRIORITY\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::PRIORITY::set(System::String^  value) {
        this[this->tableTASK->PRIORITYColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::PRIORITYCOLOR::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->PRIORITYCOLORColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PRIORITYCOLOR\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::PRIORITYCOLOR::set(System::String^  value) {
        this[this->tableTASK->PRIORITYCOLORColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::PRIORITYWEBCOLOR::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->PRIORITYWEBCOLORColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PRIORITYWEBCOLOR\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::PRIORITYWEBCOLOR::set(System::String^  value) {
        this[this->tableTASK->PRIORITYWEBCOLORColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::RISK::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->RISKColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'RISK\' in table \'TASK\' is DBNull.", e));
        }
    }
    inline System::Void NewDataSet::TASKRow::RISK::set(System::String^  value) {
        this[this->tableTASK->RISKColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::STARTDATE::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->STARTDATEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'STARTDATE\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::STARTDATE::set(System::String^  value) {
        this[this->tableTASK->STARTDATEColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::STARTDATESTRING::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->STARTDATESTRINGColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'STARTDATESTRING\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::STARTDATESTRING::set(System::String^  value) {
        this[this->tableTASK->STARTDATESTRINGColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::STATUS::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->STATUSColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'STATUS\' in table \'TASK\' is DBNull.", e));
        }
    }
    inline System::Void NewDataSet::TASKRow::STATUS::set(System::String^  value) {
        this[this->tableTASK->STATUSColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::TEXTCOLOR::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->TEXTCOLORColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'TEXTCOLOR\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::TEXTCOLOR::set(System::String^  value) {
        this[this->tableTASK->TEXTCOLORColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::TEXTWEBCOLOR::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->TEXTWEBCOLORColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'TEXTWEBCOLOR\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::TEXTWEBCOLOR::set(System::String^  value) {
        this[this->tableTASK->TEXTWEBCOLORColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::TIMEESTIMATE::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->TIMEESTIMATEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'TIMEESTIMATE\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::TIMEESTIMATE::set(System::String^  value) {
        this[this->tableTASK->TIMEESTIMATEColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::TIMEESTUNITS::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->TIMEESTUNITSColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'TIMEESTUNITS\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::TIMEESTUNITS::set(System::String^  value) {
        this[this->tableTASK->TIMEESTUNITSColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::TIMESPENT::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->TIMESPENTColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'TIMESPENT\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::TIMESPENT::set(System::String^  value) {
        this[this->tableTASK->TIMESPENTColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::TIMESPENTUNITS::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->TIMESPENTUNITSColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'TIMESPENTUNITS\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::TIMESPENTUNITS::set(System::String^  value) {
        this[this->tableTASK->TIMESPENTUNITSColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::TITLE::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->TITLEColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'TITLE\' in table \'TASK\' is DBNull.", e));
        }
    }
    inline System::Void NewDataSet::TASKRow::TITLE::set(System::String^  value) {
        this[this->tableTASK->TITLEColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::VERSION::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->VERSIONColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'VERSION\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::VERSION::set(System::String^  value) {
        this[this->tableTASK->VERSIONColumn] = value;
    }
    
    inline System::String^  NewDataSet::TASKRow::WEBCOLOR::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableTASK->WEBCOLORColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'WEBCOLOR\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::WEBCOLOR::set(System::String^  value) {
        this[this->tableTASK->WEBCOLORColumn] = value;
    }
    
    inline System::Int32 NewDataSet::TASKRow::TODOLIST_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableTASK->TODOLIST_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'TODOLIST_Id\' in table \'TASK\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TASKRow::TODOLIST_Id::set(System::Int32 value) {
        this[this->tableTASK->TODOLIST_IdColumn] = value;
    }
    
    inline ToDoList::NewDataSet::TODOLISTRow^  NewDataSet::TASKRow::TODOLISTRow::get() {
        return (cli::safe_cast<ToDoList::NewDataSet::TODOLISTRow^  >(this->GetParentRow(this->Table->ParentRelations[L"TODOLIST_TASK"])));
    }
    inline System::Void NewDataSet::TASKRow::TODOLISTRow::set(ToDoList::NewDataSet::TODOLISTRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"TODOLIST_TASK"]);
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsALLOCATEDBYNull() {
        return this->IsNull(this->tableTASK->ALLOCATEDBYColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetALLOCATEDBYNull() {
        this[this->tableTASK->ALLOCATEDBYColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsCALCCOSTNull() {
        return this->IsNull(this->tableTASK->CALCCOSTColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetCALCCOSTNull() {
        this[this->tableTASK->CALCCOSTColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsCALCPERCENTDONENull() {
        return this->IsNull(this->tableTASK->CALCPERCENTDONEColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetCALCPERCENTDONENull() {
        this[this->tableTASK->CALCPERCENTDONEColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsCALCTIMEESTIMATENull() {
        return this->IsNull(this->tableTASK->CALCTIMEESTIMATEColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetCALCTIMEESTIMATENull() {
        this[this->tableTASK->CALCTIMEESTIMATEColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsCALCTIMESPENTNull() {
        return this->IsNull(this->tableTASK->CALCTIMESPENTColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetCALCTIMESPENTNull() {
        this[this->tableTASK->CALCTIMESPENTColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsCATEGORYNull() {
        return this->IsNull(this->tableTASK->CATEGORYColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetCATEGORYNull() {
        this[this->tableTASK->CATEGORYColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsCATEGORY1Null() {
        return this->IsNull(this->tableTASK->CATEGORY1Column);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetCATEGORY1Null() {
        this[this->tableTASK->CATEGORY1Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsCATEGORY2Null() {
        return this->IsNull(this->tableTASK->CATEGORY2Column);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetCATEGORY2Null() {
        this[this->tableTASK->CATEGORY2Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsCATEGORY3Null() {
        return this->IsNull(this->tableTASK->CATEGORY3Column);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetCATEGORY3Null() {
        this[this->tableTASK->CATEGORY3Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsCATEGORY4Null() {
        return this->IsNull(this->tableTASK->CATEGORY4Column);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetCATEGORY4Null() {
        this[this->tableTASK->CATEGORY4Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsCATEGORY5Null() {
        return this->IsNull(this->tableTASK->CATEGORY5Column);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetCATEGORY5Null() {
        this[this->tableTASK->CATEGORY5Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsCATEGORY6Null() {
        return this->IsNull(this->tableTASK->CATEGORY6Column);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetCATEGORY6Null() {
        this[this->tableTASK->CATEGORY6Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsCATEGORY7Null() {
        return this->IsNull(this->tableTASK->CATEGORY7Column);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetCATEGORY7Null() {
        this[this->tableTASK->CATEGORY7Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsCATEGORY8Null() {
        return this->IsNull(this->tableTASK->CATEGORY8Column);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetCATEGORY8Null() {
        this[this->tableTASK->CATEGORY8Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsCATEGORY9Null() {
        return this->IsNull(this->tableTASK->CATEGORY9Column);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetCATEGORY9Null() {
        this[this->tableTASK->CATEGORY9Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsCOLORNull() {
        return this->IsNull(this->tableTASK->COLORColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetCOLORNull() {
        this[this->tableTASK->COLORColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsCOMMENTSNull() {
        return this->IsNull(this->tableTASK->COMMENTSColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetCOMMENTSNull() {
        this[this->tableTASK->COMMENTSColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsCOMMENTSTYPENull() {
        return this->IsNull(this->tableTASK->COMMENTSTYPEColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetCOMMENTSTYPENull() {
        this[this->tableTASK->COMMENTSTYPEColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsCOSTNull() {
        return this->IsNull(this->tableTASK->COSTColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetCOSTNull() {
        this[this->tableTASK->COSTColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsCREATIONDATENull() {
        return this->IsNull(this->tableTASK->CREATIONDATEColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetCREATIONDATENull() {
        this[this->tableTASK->CREATIONDATEColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsCREATIONDATESTRINGNull() {
        return this->IsNull(this->tableTASK->CREATIONDATESTRINGColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetCREATIONDATESTRINGNull() {
        this[this->tableTASK->CREATIONDATESTRINGColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsCUSTOMCOMMENTSNull() {
        return this->IsNull(this->tableTASK->CUSTOMCOMMENTSColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetCUSTOMCOMMENTSNull() {
        this[this->tableTASK->CUSTOMCOMMENTSColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsDEPENDSNull() {
        return this->IsNull(this->tableTASK->DEPENDSColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetDEPENDSNull() {
        this[this->tableTASK->DEPENDSColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsDEPENDS1Null() {
        return this->IsNull(this->tableTASK->DEPENDS1Column);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetDEPENDS1Null() {
        this[this->tableTASK->DEPENDS1Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsDEPENDS2Null() {
        return this->IsNull(this->tableTASK->DEPENDS2Column);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetDEPENDS2Null() {
        this[this->tableTASK->DEPENDS2Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsDEPENDS3Null() {
        return this->IsNull(this->tableTASK->DEPENDS3Column);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetDEPENDS3Null() {
        this[this->tableTASK->DEPENDS3Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsDEPENDS4Null() {
        return this->IsNull(this->tableTASK->DEPENDS4Column);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetDEPENDS4Null() {
        this[this->tableTASK->DEPENDS4Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsDEPENDS5Null() {
        return this->IsNull(this->tableTASK->DEPENDS5Column);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetDEPENDS5Null() {
        this[this->tableTASK->DEPENDS5Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsDEPENDS6Null() {
        return this->IsNull(this->tableTASK->DEPENDS6Column);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetDEPENDS6Null() {
        this[this->tableTASK->DEPENDS6Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsDEPENDS7Null() {
        return this->IsNull(this->tableTASK->DEPENDS7Column);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetDEPENDS7Null() {
        this[this->tableTASK->DEPENDS7Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsDEPENDS8Null() {
        return this->IsNull(this->tableTASK->DEPENDS8Column);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetDEPENDS8Null() {
        this[this->tableTASK->DEPENDS8Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsDEPENDS9Null() {
        return this->IsNull(this->tableTASK->DEPENDS9Column);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetDEPENDS9Null() {
        this[this->tableTASK->DEPENDS9Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsDONEDATENull() {
        return this->IsNull(this->tableTASK->DONEDATEColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetDONEDATENull() {
        this[this->tableTASK->DONEDATEColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsDONEDATESTRINGNull() {
        return this->IsNull(this->tableTASK->DONEDATESTRINGColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetDONEDATESTRINGNull() {
        this[this->tableTASK->DONEDATESTRINGColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsDUEDATENull() {
        return this->IsNull(this->tableTASK->DUEDATEColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetDUEDATENull() {
        this[this->tableTASK->DUEDATEColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsDUEDATESTRINGNull() {
        return this->IsNull(this->tableTASK->DUEDATESTRINGColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetDUEDATESTRINGNull() {
        this[this->tableTASK->DUEDATESTRINGColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsEXTERNALIDNull() {
        return this->IsNull(this->tableTASK->EXTERNALIDColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetEXTERNALIDNull() {
        this[this->tableTASK->EXTERNALIDColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsFILEREFPATHNull() {
        return this->IsNull(this->tableTASK->FILEREFPATHColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetFILEREFPATHNull() {
        this[this->tableTASK->FILEREFPATHColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsFLAGNull() {
        return this->IsNull(this->tableTASK->FLAGColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetFLAGNull() {
        this[this->tableTASK->FLAGColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsICONINDEXNull() {
        return this->IsNull(this->tableTASK->ICONINDEXColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetICONINDEXNull() {
        this[this->tableTASK->ICONINDEXColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsIDNull() {
        return this->IsNull(this->tableTASK->IDColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetIDNull() {
        this[this->tableTASK->IDColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsLASTMODNull() {
        return this->IsNull(this->tableTASK->LASTMODColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetLASTMODNull() {
        this[this->tableTASK->LASTMODColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsLASTMODSTRINGNull() {
        return this->IsNull(this->tableTASK->LASTMODSTRINGColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetLASTMODSTRINGNull() {
        this[this->tableTASK->LASTMODSTRINGColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsNUMCATEGORYNull() {
        return this->IsNull(this->tableTASK->NUMCATEGORYColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetNUMCATEGORYNull() {
        this[this->tableTASK->NUMCATEGORYColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsNUMDEPENDSNull() {
        return this->IsNull(this->tableTASK->NUMDEPENDSColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetNUMDEPENDSNull() {
        this[this->tableTASK->NUMDEPENDSColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsNUMPERSONNull() {
        return this->IsNull(this->tableTASK->NUMPERSONColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetNUMPERSONNull() {
        this[this->tableTASK->NUMPERSONColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsPERCENTDONENull() {
        return this->IsNull(this->tableTASK->PERCENTDONEColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetPERCENTDONENull() {
        this[this->tableTASK->PERCENTDONEColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsPERSONNull() {
        return this->IsNull(this->tableTASK->PERSONColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetPERSONNull() {
        this[this->tableTASK->PERSONColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsPERSON1Null() {
        return this->IsNull(this->tableTASK->PERSON1Column);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetPERSON1Null() {
        this[this->tableTASK->PERSON1Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsPERSON2Null() {
        return this->IsNull(this->tableTASK->PERSON2Column);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetPERSON2Null() {
        this[this->tableTASK->PERSON2Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsPERSON3Null() {
        return this->IsNull(this->tableTASK->PERSON3Column);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetPERSON3Null() {
        this[this->tableTASK->PERSON3Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsPERSON4Null() {
        return this->IsNull(this->tableTASK->PERSON4Column);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetPERSON4Null() {
        this[this->tableTASK->PERSON4Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsPERSON5Null() {
        return this->IsNull(this->tableTASK->PERSON5Column);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetPERSON5Null() {
        this[this->tableTASK->PERSON5Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsPERSON6Null() {
        return this->IsNull(this->tableTASK->PERSON6Column);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetPERSON6Null() {
        this[this->tableTASK->PERSON6Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsPERSON7Null() {
        return this->IsNull(this->tableTASK->PERSON7Column);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetPERSON7Null() {
        this[this->tableTASK->PERSON7Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsPERSON8Null() {
        return this->IsNull(this->tableTASK->PERSON8Column);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetPERSON8Null() {
        this[this->tableTASK->PERSON8Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsPERSON9Null() {
        return this->IsNull(this->tableTASK->PERSON9Column);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetPERSON9Null() {
        this[this->tableTASK->PERSON9Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsPOSNull() {
        return this->IsNull(this->tableTASK->POSColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetPOSNull() {
        this[this->tableTASK->POSColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsPRIORITYNull() {
        return this->IsNull(this->tableTASK->PRIORITYColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetPRIORITYNull() {
        this[this->tableTASK->PRIORITYColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsPRIORITYCOLORNull() {
        return this->IsNull(this->tableTASK->PRIORITYCOLORColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetPRIORITYCOLORNull() {
        this[this->tableTASK->PRIORITYCOLORColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsPRIORITYWEBCOLORNull() {
        return this->IsNull(this->tableTASK->PRIORITYWEBCOLORColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetPRIORITYWEBCOLORNull() {
        this[this->tableTASK->PRIORITYWEBCOLORColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsRISKNull() {
        return this->IsNull(this->tableTASK->RISKColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetRISKNull() {
        this[this->tableTASK->RISKColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsSTARTDATENull() {
        return this->IsNull(this->tableTASK->STARTDATEColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetSTARTDATENull() {
        this[this->tableTASK->STARTDATEColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsSTARTDATESTRINGNull() {
        return this->IsNull(this->tableTASK->STARTDATESTRINGColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetSTARTDATESTRINGNull() {
        this[this->tableTASK->STARTDATESTRINGColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsSTATUSNull() {
        return this->IsNull(this->tableTASK->STATUSColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetSTATUSNull() {
        this[this->tableTASK->STATUSColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsTEXTCOLORNull() {
        return this->IsNull(this->tableTASK->TEXTCOLORColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetTEXTCOLORNull() {
        this[this->tableTASK->TEXTCOLORColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsTEXTWEBCOLORNull() {
        return this->IsNull(this->tableTASK->TEXTWEBCOLORColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetTEXTWEBCOLORNull() {
        this[this->tableTASK->TEXTWEBCOLORColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsTIMEESTIMATENull() {
        return this->IsNull(this->tableTASK->TIMEESTIMATEColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetTIMEESTIMATENull() {
        this[this->tableTASK->TIMEESTIMATEColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsTIMEESTUNITSNull() {
        return this->IsNull(this->tableTASK->TIMEESTUNITSColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetTIMEESTUNITSNull() {
        this[this->tableTASK->TIMEESTUNITSColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsTIMESPENTNull() {
        return this->IsNull(this->tableTASK->TIMESPENTColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetTIMESPENTNull() {
        this[this->tableTASK->TIMESPENTColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsTIMESPENTUNITSNull() {
        return this->IsNull(this->tableTASK->TIMESPENTUNITSColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetTIMESPENTUNITSNull() {
        this[this->tableTASK->TIMESPENTUNITSColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsTITLENull() {
        return this->IsNull(this->tableTASK->TITLEColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetTITLENull() {
        this[this->tableTASK->TITLEColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsVERSIONNull() {
        return this->IsNull(this->tableTASK->VERSIONColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetVERSIONNull() {
        this[this->tableTASK->VERSIONColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsWEBCOLORNull() {
        return this->IsNull(this->tableTASK->WEBCOLORColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetWEBCOLORNull() {
        this[this->tableTASK->WEBCOLORColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::TASKRow::IsTODOLIST_IdNull() {
        return this->IsNull(this->tableTASK->TODOLIST_IdColumn);
    }
    
    inline ::System::Void NewDataSet::TASKRow::SetTODOLIST_IdNull() {
        this[this->tableTASK->TODOLIST_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::CATEGORYRow::CATEGORYRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableCATEGORY = (cli::safe_cast<ToDoList::NewDataSet::CATEGORYDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::CATEGORYRow::CATEGORY9::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableCATEGORY->CATEGORY9Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CATEGORY9\' in table \'CATEGORY\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::CATEGORYRow::CATEGORY9::set(System::String^  value) {
        this[this->tableCATEGORY->CATEGORY9Column] = value;
    }
    
    inline System::String^  NewDataSet::CATEGORYRow::CATEGORY8::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableCATEGORY->CATEGORY8Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CATEGORY8\' in table \'CATEGORY\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::CATEGORYRow::CATEGORY8::set(System::String^  value) {
        this[this->tableCATEGORY->CATEGORY8Column] = value;
    }
    
    inline System::String^  NewDataSet::CATEGORYRow::CATEGORY7::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableCATEGORY->CATEGORY7Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CATEGORY7\' in table \'CATEGORY\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::CATEGORYRow::CATEGORY7::set(System::String^  value) {
        this[this->tableCATEGORY->CATEGORY7Column] = value;
    }
    
    inline System::String^  NewDataSet::CATEGORYRow::CATEGORY6::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableCATEGORY->CATEGORY6Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CATEGORY6\' in table \'CATEGORY\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::CATEGORYRow::CATEGORY6::set(System::String^  value) {
        this[this->tableCATEGORY->CATEGORY6Column] = value;
    }
    
    inline System::String^  NewDataSet::CATEGORYRow::CATEGORY5::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableCATEGORY->CATEGORY5Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CATEGORY5\' in table \'CATEGORY\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::CATEGORYRow::CATEGORY5::set(System::String^  value) {
        this[this->tableCATEGORY->CATEGORY5Column] = value;
    }
    
    inline System::String^  NewDataSet::CATEGORYRow::CATEGORY4::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableCATEGORY->CATEGORY4Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CATEGORY4\' in table \'CATEGORY\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::CATEGORYRow::CATEGORY4::set(System::String^  value) {
        this[this->tableCATEGORY->CATEGORY4Column] = value;
    }
    
    inline System::String^  NewDataSet::CATEGORYRow::CATEGORY3::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableCATEGORY->CATEGORY3Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CATEGORY3\' in table \'CATEGORY\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::CATEGORYRow::CATEGORY3::set(System::String^  value) {
        this[this->tableCATEGORY->CATEGORY3Column] = value;
    }
    
    inline System::String^  NewDataSet::CATEGORYRow::CATEGORY2::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableCATEGORY->CATEGORY2Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CATEGORY2\' in table \'CATEGORY\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::CATEGORYRow::CATEGORY2::set(System::String^  value) {
        this[this->tableCATEGORY->CATEGORY2Column] = value;
    }
    
    inline System::String^  NewDataSet::CATEGORYRow::CATEGORY1::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableCATEGORY->CATEGORY1Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CATEGORY1\' in table \'CATEGORY\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::CATEGORYRow::CATEGORY1::set(System::String^  value) {
        this[this->tableCATEGORY->CATEGORY1Column] = value;
    }
    
    inline System::String^  NewDataSet::CATEGORYRow::CATEGORY0::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableCATEGORY->CATEGORY0Column]));
    }
    inline System::Void NewDataSet::CATEGORYRow::CATEGORY0::set(System::String^  value) {
        this[this->tableCATEGORY->CATEGORY0Column] = value;
    }
    
    inline System::Int32 NewDataSet::CATEGORYRow::TODOLIST_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableCATEGORY->TODOLIST_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'TODOLIST_Id\' in table \'CATEGORY\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::CATEGORYRow::TODOLIST_Id::set(System::Int32 value) {
        this[this->tableCATEGORY->TODOLIST_IdColumn] = value;
    }
    
    inline ToDoList::NewDataSet::TODOLISTRow^  NewDataSet::CATEGORYRow::TODOLISTRow::get() {
        return (cli::safe_cast<ToDoList::NewDataSet::TODOLISTRow^  >(this->GetParentRow(this->Table->ParentRelations[L"TODOLIST_CATEGORY"])));
    }
    inline System::Void NewDataSet::CATEGORYRow::TODOLISTRow::set(ToDoList::NewDataSet::TODOLISTRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"TODOLIST_CATEGORY"]);
    }
    
    inline ::System::Boolean NewDataSet::CATEGORYRow::IsCATEGORY9Null() {
        return this->IsNull(this->tableCATEGORY->CATEGORY9Column);
    }
    
    inline ::System::Void NewDataSet::CATEGORYRow::SetCATEGORY9Null() {
        this[this->tableCATEGORY->CATEGORY9Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::CATEGORYRow::IsCATEGORY8Null() {
        return this->IsNull(this->tableCATEGORY->CATEGORY8Column);
    }
    
    inline ::System::Void NewDataSet::CATEGORYRow::SetCATEGORY8Null() {
        this[this->tableCATEGORY->CATEGORY8Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::CATEGORYRow::IsCATEGORY7Null() {
        return this->IsNull(this->tableCATEGORY->CATEGORY7Column);
    }
    
    inline ::System::Void NewDataSet::CATEGORYRow::SetCATEGORY7Null() {
        this[this->tableCATEGORY->CATEGORY7Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::CATEGORYRow::IsCATEGORY6Null() {
        return this->IsNull(this->tableCATEGORY->CATEGORY6Column);
    }
    
    inline ::System::Void NewDataSet::CATEGORYRow::SetCATEGORY6Null() {
        this[this->tableCATEGORY->CATEGORY6Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::CATEGORYRow::IsCATEGORY5Null() {
        return this->IsNull(this->tableCATEGORY->CATEGORY5Column);
    }
    
    inline ::System::Void NewDataSet::CATEGORYRow::SetCATEGORY5Null() {
        this[this->tableCATEGORY->CATEGORY5Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::CATEGORYRow::IsCATEGORY4Null() {
        return this->IsNull(this->tableCATEGORY->CATEGORY4Column);
    }
    
    inline ::System::Void NewDataSet::CATEGORYRow::SetCATEGORY4Null() {
        this[this->tableCATEGORY->CATEGORY4Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::CATEGORYRow::IsCATEGORY3Null() {
        return this->IsNull(this->tableCATEGORY->CATEGORY3Column);
    }
    
    inline ::System::Void NewDataSet::CATEGORYRow::SetCATEGORY3Null() {
        this[this->tableCATEGORY->CATEGORY3Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::CATEGORYRow::IsCATEGORY2Null() {
        return this->IsNull(this->tableCATEGORY->CATEGORY2Column);
    }
    
    inline ::System::Void NewDataSet::CATEGORYRow::SetCATEGORY2Null() {
        this[this->tableCATEGORY->CATEGORY2Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::CATEGORYRow::IsCATEGORY1Null() {
        return this->IsNull(this->tableCATEGORY->CATEGORY1Column);
    }
    
    inline ::System::Void NewDataSet::CATEGORYRow::SetCATEGORY1Null() {
        this[this->tableCATEGORY->CATEGORY1Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::CATEGORYRow::IsTODOLIST_IdNull() {
        return this->IsNull(this->tableCATEGORY->TODOLIST_IdColumn);
    }
    
    inline ::System::Void NewDataSet::CATEGORYRow::SetTODOLIST_IdNull() {
        this[this->tableCATEGORY->TODOLIST_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::STATUSRow::STATUSRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableSTATUS = (cli::safe_cast<ToDoList::NewDataSet::STATUSDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::STATUSRow::STATUS9::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableSTATUS->STATUS9Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'STATUS9\' in table \'STATUS\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::STATUSRow::STATUS9::set(System::String^  value) {
        this[this->tableSTATUS->STATUS9Column] = value;
    }
    
    inline System::String^  NewDataSet::STATUSRow::STATUS8::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableSTATUS->STATUS8Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'STATUS8\' in table \'STATUS\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::STATUSRow::STATUS8::set(System::String^  value) {
        this[this->tableSTATUS->STATUS8Column] = value;
    }
    
    inline System::String^  NewDataSet::STATUSRow::STATUS7::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableSTATUS->STATUS7Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'STATUS7\' in table \'STATUS\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::STATUSRow::STATUS7::set(System::String^  value) {
        this[this->tableSTATUS->STATUS7Column] = value;
    }
    
    inline System::String^  NewDataSet::STATUSRow::STATUS6::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableSTATUS->STATUS6Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'STATUS6\' in table \'STATUS\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::STATUSRow::STATUS6::set(System::String^  value) {
        this[this->tableSTATUS->STATUS6Column] = value;
    }
    
    inline System::String^  NewDataSet::STATUSRow::STATUS5::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableSTATUS->STATUS5Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'STATUS5\' in table \'STATUS\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::STATUSRow::STATUS5::set(System::String^  value) {
        this[this->tableSTATUS->STATUS5Column] = value;
    }
    
    inline System::String^  NewDataSet::STATUSRow::STATUS4::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableSTATUS->STATUS4Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'STATUS4\' in table \'STATUS\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::STATUSRow::STATUS4::set(System::String^  value) {
        this[this->tableSTATUS->STATUS4Column] = value;
    }
    
    inline System::String^  NewDataSet::STATUSRow::STATUS3::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableSTATUS->STATUS3Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'STATUS3\' in table \'STATUS\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::STATUSRow::STATUS3::set(System::String^  value) {
        this[this->tableSTATUS->STATUS3Column] = value;
    }
    
    inline System::String^  NewDataSet::STATUSRow::STATUS2::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableSTATUS->STATUS2Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'STATUS2\' in table \'STATUS\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::STATUSRow::STATUS2::set(System::String^  value) {
        this[this->tableSTATUS->STATUS2Column] = value;
    }
    
    inline System::String^  NewDataSet::STATUSRow::STATUS1::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableSTATUS->STATUS1Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'STATUS1\' in table \'STATUS\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::STATUSRow::STATUS1::set(System::String^  value) {
        this[this->tableSTATUS->STATUS1Column] = value;
    }
    
    inline System::String^  NewDataSet::STATUSRow::STATUS0::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableSTATUS->STATUS0Column]));
    }
    inline System::Void NewDataSet::STATUSRow::STATUS0::set(System::String^  value) {
        this[this->tableSTATUS->STATUS0Column] = value;
    }
    
    inline System::Int32 NewDataSet::STATUSRow::TODOLIST_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableSTATUS->TODOLIST_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'TODOLIST_Id\' in table \'STATUS\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::STATUSRow::TODOLIST_Id::set(System::Int32 value) {
        this[this->tableSTATUS->TODOLIST_IdColumn] = value;
    }
    
    inline ToDoList::NewDataSet::TODOLISTRow^  NewDataSet::STATUSRow::TODOLISTRow::get() {
        return (cli::safe_cast<ToDoList::NewDataSet::TODOLISTRow^  >(this->GetParentRow(this->Table->ParentRelations[L"TODOLIST_STATUS"])));
    }
    inline System::Void NewDataSet::STATUSRow::TODOLISTRow::set(ToDoList::NewDataSet::TODOLISTRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"TODOLIST_STATUS"]);
    }
    
    inline ::System::Boolean NewDataSet::STATUSRow::IsSTATUS9Null() {
        return this->IsNull(this->tableSTATUS->STATUS9Column);
    }
    
    inline ::System::Void NewDataSet::STATUSRow::SetSTATUS9Null() {
        this[this->tableSTATUS->STATUS9Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::STATUSRow::IsSTATUS8Null() {
        return this->IsNull(this->tableSTATUS->STATUS8Column);
    }
    
    inline ::System::Void NewDataSet::STATUSRow::SetSTATUS8Null() {
        this[this->tableSTATUS->STATUS8Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::STATUSRow::IsSTATUS7Null() {
        return this->IsNull(this->tableSTATUS->STATUS7Column);
    }
    
    inline ::System::Void NewDataSet::STATUSRow::SetSTATUS7Null() {
        this[this->tableSTATUS->STATUS7Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::STATUSRow::IsSTATUS6Null() {
        return this->IsNull(this->tableSTATUS->STATUS6Column);
    }
    
    inline ::System::Void NewDataSet::STATUSRow::SetSTATUS6Null() {
        this[this->tableSTATUS->STATUS6Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::STATUSRow::IsSTATUS5Null() {
        return this->IsNull(this->tableSTATUS->STATUS5Column);
    }
    
    inline ::System::Void NewDataSet::STATUSRow::SetSTATUS5Null() {
        this[this->tableSTATUS->STATUS5Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::STATUSRow::IsSTATUS4Null() {
        return this->IsNull(this->tableSTATUS->STATUS4Column);
    }
    
    inline ::System::Void NewDataSet::STATUSRow::SetSTATUS4Null() {
        this[this->tableSTATUS->STATUS4Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::STATUSRow::IsSTATUS3Null() {
        return this->IsNull(this->tableSTATUS->STATUS3Column);
    }
    
    inline ::System::Void NewDataSet::STATUSRow::SetSTATUS3Null() {
        this[this->tableSTATUS->STATUS3Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::STATUSRow::IsSTATUS2Null() {
        return this->IsNull(this->tableSTATUS->STATUS2Column);
    }
    
    inline ::System::Void NewDataSet::STATUSRow::SetSTATUS2Null() {
        this[this->tableSTATUS->STATUS2Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::STATUSRow::IsSTATUS1Null() {
        return this->IsNull(this->tableSTATUS->STATUS1Column);
    }
    
    inline ::System::Void NewDataSet::STATUSRow::SetSTATUS1Null() {
        this[this->tableSTATUS->STATUS1Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::STATUSRow::IsTODOLIST_IdNull() {
        return this->IsNull(this->tableSTATUS->TODOLIST_IdColumn);
    }
    
    inline ::System::Void NewDataSet::STATUSRow::SetTODOLIST_IdNull() {
        this[this->tableSTATUS->TODOLIST_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::PERSONRow::PERSONRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tablePERSON = (cli::safe_cast<ToDoList::NewDataSet::PERSONDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::PERSONRow::PERSON9::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablePERSON->PERSON9Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PERSON9\' in table \'PERSON\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::PERSONRow::PERSON9::set(System::String^  value) {
        this[this->tablePERSON->PERSON9Column] = value;
    }
    
    inline System::String^  NewDataSet::PERSONRow::PERSON8::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablePERSON->PERSON8Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PERSON8\' in table \'PERSON\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::PERSONRow::PERSON8::set(System::String^  value) {
        this[this->tablePERSON->PERSON8Column] = value;
    }
    
    inline System::String^  NewDataSet::PERSONRow::PERSON7::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablePERSON->PERSON7Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PERSON7\' in table \'PERSON\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::PERSONRow::PERSON7::set(System::String^  value) {
        this[this->tablePERSON->PERSON7Column] = value;
    }
    
    inline System::String^  NewDataSet::PERSONRow::PERSON6::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablePERSON->PERSON6Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PERSON6\' in table \'PERSON\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::PERSONRow::PERSON6::set(System::String^  value) {
        this[this->tablePERSON->PERSON6Column] = value;
    }
    
    inline System::String^  NewDataSet::PERSONRow::PERSON5::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablePERSON->PERSON5Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PERSON5\' in table \'PERSON\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::PERSONRow::PERSON5::set(System::String^  value) {
        this[this->tablePERSON->PERSON5Column] = value;
    }
    
    inline System::String^  NewDataSet::PERSONRow::PERSON4::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablePERSON->PERSON4Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PERSON4\' in table \'PERSON\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::PERSONRow::PERSON4::set(System::String^  value) {
        this[this->tablePERSON->PERSON4Column] = value;
    }
    
    inline System::String^  NewDataSet::PERSONRow::PERSON3::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablePERSON->PERSON3Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PERSON3\' in table \'PERSON\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::PERSONRow::PERSON3::set(System::String^  value) {
        this[this->tablePERSON->PERSON3Column] = value;
    }
    
    inline System::String^  NewDataSet::PERSONRow::PERSON2::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablePERSON->PERSON2Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PERSON2\' in table \'PERSON\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::PERSONRow::PERSON2::set(System::String^  value) {
        this[this->tablePERSON->PERSON2Column] = value;
    }
    
    inline System::String^  NewDataSet::PERSONRow::PERSON1::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablePERSON->PERSON1Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PERSON1\' in table \'PERSON\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::PERSONRow::PERSON1::set(System::String^  value) {
        this[this->tablePERSON->PERSON1Column] = value;
    }
    
    inline System::String^  NewDataSet::PERSONRow::PERSON0::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tablePERSON->PERSON0Column]));
    }
    inline System::Void NewDataSet::PERSONRow::PERSON0::set(System::String^  value) {
        this[this->tablePERSON->PERSON0Column] = value;
    }
    
    inline System::Int32 NewDataSet::PERSONRow::TODOLIST_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tablePERSON->TODOLIST_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'TODOLIST_Id\' in table \'PERSON\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::PERSONRow::TODOLIST_Id::set(System::Int32 value) {
        this[this->tablePERSON->TODOLIST_IdColumn] = value;
    }
    
    inline ToDoList::NewDataSet::TODOLISTRow^  NewDataSet::PERSONRow::TODOLISTRow::get() {
        return (cli::safe_cast<ToDoList::NewDataSet::TODOLISTRow^  >(this->GetParentRow(this->Table->ParentRelations[L"TODOLIST_PERSON"])));
    }
    inline System::Void NewDataSet::PERSONRow::TODOLISTRow::set(ToDoList::NewDataSet::TODOLISTRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"TODOLIST_PERSON"]);
    }
    
    inline ::System::Boolean NewDataSet::PERSONRow::IsPERSON9Null() {
        return this->IsNull(this->tablePERSON->PERSON9Column);
    }
    
    inline ::System::Void NewDataSet::PERSONRow::SetPERSON9Null() {
        this[this->tablePERSON->PERSON9Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::PERSONRow::IsPERSON8Null() {
        return this->IsNull(this->tablePERSON->PERSON8Column);
    }
    
    inline ::System::Void NewDataSet::PERSONRow::SetPERSON8Null() {
        this[this->tablePERSON->PERSON8Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::PERSONRow::IsPERSON7Null() {
        return this->IsNull(this->tablePERSON->PERSON7Column);
    }
    
    inline ::System::Void NewDataSet::PERSONRow::SetPERSON7Null() {
        this[this->tablePERSON->PERSON7Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::PERSONRow::IsPERSON6Null() {
        return this->IsNull(this->tablePERSON->PERSON6Column);
    }
    
    inline ::System::Void NewDataSet::PERSONRow::SetPERSON6Null() {
        this[this->tablePERSON->PERSON6Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::PERSONRow::IsPERSON5Null() {
        return this->IsNull(this->tablePERSON->PERSON5Column);
    }
    
    inline ::System::Void NewDataSet::PERSONRow::SetPERSON5Null() {
        this[this->tablePERSON->PERSON5Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::PERSONRow::IsPERSON4Null() {
        return this->IsNull(this->tablePERSON->PERSON4Column);
    }
    
    inline ::System::Void NewDataSet::PERSONRow::SetPERSON4Null() {
        this[this->tablePERSON->PERSON4Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::PERSONRow::IsPERSON3Null() {
        return this->IsNull(this->tablePERSON->PERSON3Column);
    }
    
    inline ::System::Void NewDataSet::PERSONRow::SetPERSON3Null() {
        this[this->tablePERSON->PERSON3Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::PERSONRow::IsPERSON2Null() {
        return this->IsNull(this->tablePERSON->PERSON2Column);
    }
    
    inline ::System::Void NewDataSet::PERSONRow::SetPERSON2Null() {
        this[this->tablePERSON->PERSON2Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::PERSONRow::IsPERSON1Null() {
        return this->IsNull(this->tablePERSON->PERSON1Column);
    }
    
    inline ::System::Void NewDataSet::PERSONRow::SetPERSON1Null() {
        this[this->tablePERSON->PERSON1Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::PERSONRow::IsTODOLIST_IdNull() {
        return this->IsNull(this->tablePERSON->TODOLIST_IdColumn);
    }
    
    inline ::System::Void NewDataSet::PERSONRow::SetTODOLIST_IdNull() {
        this[this->tablePERSON->TODOLIST_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::ALLOCATEDBYRow::ALLOCATEDBYRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableALLOCATEDBY = (cli::safe_cast<ToDoList::NewDataSet::ALLOCATEDBYDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::ALLOCATEDBYRow::ALLOCATEDBY9::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableALLOCATEDBY->ALLOCATEDBY9Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'ALLOCATEDBY9\' in table \'ALLOCATEDBY\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ALLOCATEDBYRow::ALLOCATEDBY9::set(System::String^  value) {
        this[this->tableALLOCATEDBY->ALLOCATEDBY9Column] = value;
    }
    
    inline System::String^  NewDataSet::ALLOCATEDBYRow::ALLOCATEDBY8::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableALLOCATEDBY->ALLOCATEDBY8Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'ALLOCATEDBY8\' in table \'ALLOCATEDBY\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ALLOCATEDBYRow::ALLOCATEDBY8::set(System::String^  value) {
        this[this->tableALLOCATEDBY->ALLOCATEDBY8Column] = value;
    }
    
    inline System::String^  NewDataSet::ALLOCATEDBYRow::ALLOCATEDBY7::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableALLOCATEDBY->ALLOCATEDBY7Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'ALLOCATEDBY7\' in table \'ALLOCATEDBY\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ALLOCATEDBYRow::ALLOCATEDBY7::set(System::String^  value) {
        this[this->tableALLOCATEDBY->ALLOCATEDBY7Column] = value;
    }
    
    inline System::String^  NewDataSet::ALLOCATEDBYRow::ALLOCATEDBY6::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableALLOCATEDBY->ALLOCATEDBY6Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'ALLOCATEDBY6\' in table \'ALLOCATEDBY\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ALLOCATEDBYRow::ALLOCATEDBY6::set(System::String^  value) {
        this[this->tableALLOCATEDBY->ALLOCATEDBY6Column] = value;
    }
    
    inline System::String^  NewDataSet::ALLOCATEDBYRow::ALLOCATEDBY5::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableALLOCATEDBY->ALLOCATEDBY5Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'ALLOCATEDBY5\' in table \'ALLOCATEDBY\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ALLOCATEDBYRow::ALLOCATEDBY5::set(System::String^  value) {
        this[this->tableALLOCATEDBY->ALLOCATEDBY5Column] = value;
    }
    
    inline System::String^  NewDataSet::ALLOCATEDBYRow::ALLOCATEDBY4::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableALLOCATEDBY->ALLOCATEDBY4Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'ALLOCATEDBY4\' in table \'ALLOCATEDBY\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ALLOCATEDBYRow::ALLOCATEDBY4::set(System::String^  value) {
        this[this->tableALLOCATEDBY->ALLOCATEDBY4Column] = value;
    }
    
    inline System::String^  NewDataSet::ALLOCATEDBYRow::ALLOCATEDBY3::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableALLOCATEDBY->ALLOCATEDBY3Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'ALLOCATEDBY3\' in table \'ALLOCATEDBY\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ALLOCATEDBYRow::ALLOCATEDBY3::set(System::String^  value) {
        this[this->tableALLOCATEDBY->ALLOCATEDBY3Column] = value;
    }
    
    inline System::String^  NewDataSet::ALLOCATEDBYRow::ALLOCATEDBY2::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableALLOCATEDBY->ALLOCATEDBY2Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'ALLOCATEDBY2\' in table \'ALLOCATEDBY\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ALLOCATEDBYRow::ALLOCATEDBY2::set(System::String^  value) {
        this[this->tableALLOCATEDBY->ALLOCATEDBY2Column] = value;
    }
    
    inline System::String^  NewDataSet::ALLOCATEDBYRow::ALLOCATEDBY1::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableALLOCATEDBY->ALLOCATEDBY1Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'ALLOCATEDBY1\' in table \'ALLOCATEDBY\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ALLOCATEDBYRow::ALLOCATEDBY1::set(System::String^  value) {
        this[this->tableALLOCATEDBY->ALLOCATEDBY1Column] = value;
    }
    
    inline System::String^  NewDataSet::ALLOCATEDBYRow::ALLOCATEDBY0::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableALLOCATEDBY->ALLOCATEDBY0Column]));
    }
    inline System::Void NewDataSet::ALLOCATEDBYRow::ALLOCATEDBY0::set(System::String^  value) {
        this[this->tableALLOCATEDBY->ALLOCATEDBY0Column] = value;
    }
    
    inline System::Int32 NewDataSet::ALLOCATEDBYRow::TODOLIST_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableALLOCATEDBY->TODOLIST_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'TODOLIST_Id\' in table \'ALLOCATEDBY\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ALLOCATEDBYRow::TODOLIST_Id::set(System::Int32 value) {
        this[this->tableALLOCATEDBY->TODOLIST_IdColumn] = value;
    }
    
    inline ToDoList::NewDataSet::TODOLISTRow^  NewDataSet::ALLOCATEDBYRow::TODOLISTRow::get() {
        return (cli::safe_cast<ToDoList::NewDataSet::TODOLISTRow^  >(this->GetParentRow(this->Table->ParentRelations[L"TODOLIST_ALLOCATEDBY"])));
    }
    inline System::Void NewDataSet::ALLOCATEDBYRow::TODOLISTRow::set(ToDoList::NewDataSet::TODOLISTRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"TODOLIST_ALLOCATEDBY"]);
    }
    
    inline ::System::Boolean NewDataSet::ALLOCATEDBYRow::IsALLOCATEDBY9Null() {
        return this->IsNull(this->tableALLOCATEDBY->ALLOCATEDBY9Column);
    }
    
    inline ::System::Void NewDataSet::ALLOCATEDBYRow::SetALLOCATEDBY9Null() {
        this[this->tableALLOCATEDBY->ALLOCATEDBY9Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ALLOCATEDBYRow::IsALLOCATEDBY8Null() {
        return this->IsNull(this->tableALLOCATEDBY->ALLOCATEDBY8Column);
    }
    
    inline ::System::Void NewDataSet::ALLOCATEDBYRow::SetALLOCATEDBY8Null() {
        this[this->tableALLOCATEDBY->ALLOCATEDBY8Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ALLOCATEDBYRow::IsALLOCATEDBY7Null() {
        return this->IsNull(this->tableALLOCATEDBY->ALLOCATEDBY7Column);
    }
    
    inline ::System::Void NewDataSet::ALLOCATEDBYRow::SetALLOCATEDBY7Null() {
        this[this->tableALLOCATEDBY->ALLOCATEDBY7Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ALLOCATEDBYRow::IsALLOCATEDBY6Null() {
        return this->IsNull(this->tableALLOCATEDBY->ALLOCATEDBY6Column);
    }
    
    inline ::System::Void NewDataSet::ALLOCATEDBYRow::SetALLOCATEDBY6Null() {
        this[this->tableALLOCATEDBY->ALLOCATEDBY6Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ALLOCATEDBYRow::IsALLOCATEDBY5Null() {
        return this->IsNull(this->tableALLOCATEDBY->ALLOCATEDBY5Column);
    }
    
    inline ::System::Void NewDataSet::ALLOCATEDBYRow::SetALLOCATEDBY5Null() {
        this[this->tableALLOCATEDBY->ALLOCATEDBY5Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ALLOCATEDBYRow::IsALLOCATEDBY4Null() {
        return this->IsNull(this->tableALLOCATEDBY->ALLOCATEDBY4Column);
    }
    
    inline ::System::Void NewDataSet::ALLOCATEDBYRow::SetALLOCATEDBY4Null() {
        this[this->tableALLOCATEDBY->ALLOCATEDBY4Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ALLOCATEDBYRow::IsALLOCATEDBY3Null() {
        return this->IsNull(this->tableALLOCATEDBY->ALLOCATEDBY3Column);
    }
    
    inline ::System::Void NewDataSet::ALLOCATEDBYRow::SetALLOCATEDBY3Null() {
        this[this->tableALLOCATEDBY->ALLOCATEDBY3Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ALLOCATEDBYRow::IsALLOCATEDBY2Null() {
        return this->IsNull(this->tableALLOCATEDBY->ALLOCATEDBY2Column);
    }
    
    inline ::System::Void NewDataSet::ALLOCATEDBYRow::SetALLOCATEDBY2Null() {
        this[this->tableALLOCATEDBY->ALLOCATEDBY2Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ALLOCATEDBYRow::IsALLOCATEDBY1Null() {
        return this->IsNull(this->tableALLOCATEDBY->ALLOCATEDBY1Column);
    }
    
    inline ::System::Void NewDataSet::ALLOCATEDBYRow::SetALLOCATEDBY1Null() {
        this[this->tableALLOCATEDBY->ALLOCATEDBY1Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ALLOCATEDBYRow::IsTODOLIST_IdNull() {
        return this->IsNull(this->tableALLOCATEDBY->TODOLIST_IdColumn);
    }
    
    inline ::System::Void NewDataSet::ALLOCATEDBYRow::SetTODOLIST_IdNull() {
        this[this->tableALLOCATEDBY->TODOLIST_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::VERSIONRow::VERSIONRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableVERSION = (cli::safe_cast<ToDoList::NewDataSet::VERSIONDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::VERSIONRow::VERSION9::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableVERSION->VERSION9Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'VERSION9\' in table \'VERSION\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::VERSIONRow::VERSION9::set(System::String^  value) {
        this[this->tableVERSION->VERSION9Column] = value;
    }
    
    inline System::String^  NewDataSet::VERSIONRow::VERSION8::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableVERSION->VERSION8Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'VERSION8\' in table \'VERSION\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::VERSIONRow::VERSION8::set(System::String^  value) {
        this[this->tableVERSION->VERSION8Column] = value;
    }
    
    inline System::String^  NewDataSet::VERSIONRow::VERSION7::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableVERSION->VERSION7Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'VERSION7\' in table \'VERSION\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::VERSIONRow::VERSION7::set(System::String^  value) {
        this[this->tableVERSION->VERSION7Column] = value;
    }
    
    inline System::String^  NewDataSet::VERSIONRow::VERSION6::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableVERSION->VERSION6Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'VERSION6\' in table \'VERSION\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::VERSIONRow::VERSION6::set(System::String^  value) {
        this[this->tableVERSION->VERSION6Column] = value;
    }
    
    inline System::String^  NewDataSet::VERSIONRow::VERSION5::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableVERSION->VERSION5Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'VERSION5\' in table \'VERSION\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::VERSIONRow::VERSION5::set(System::String^  value) {
        this[this->tableVERSION->VERSION5Column] = value;
    }
    
    inline System::String^  NewDataSet::VERSIONRow::VERSION4::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableVERSION->VERSION4Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'VERSION4\' in table \'VERSION\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::VERSIONRow::VERSION4::set(System::String^  value) {
        this[this->tableVERSION->VERSION4Column] = value;
    }
    
    inline System::String^  NewDataSet::VERSIONRow::VERSION3::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableVERSION->VERSION3Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'VERSION3\' in table \'VERSION\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::VERSIONRow::VERSION3::set(System::String^  value) {
        this[this->tableVERSION->VERSION3Column] = value;
    }
    
    inline System::String^  NewDataSet::VERSIONRow::VERSION2::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableVERSION->VERSION2Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'VERSION2\' in table \'VERSION\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::VERSIONRow::VERSION2::set(System::String^  value) {
        this[this->tableVERSION->VERSION2Column] = value;
    }
    
    inline System::String^  NewDataSet::VERSIONRow::VERSION1::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableVERSION->VERSION1Column]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'VERSION1\' in table \'VERSION\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::VERSIONRow::VERSION1::set(System::String^  value) {
        this[this->tableVERSION->VERSION1Column] = value;
    }
    
    inline System::String^  NewDataSet::VERSIONRow::VERSION0::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableVERSION->VERSION0Column]));
    }
    inline System::Void NewDataSet::VERSIONRow::VERSION0::set(System::String^  value) {
        this[this->tableVERSION->VERSION0Column] = value;
    }
    
    inline System::Int32 NewDataSet::VERSIONRow::TODOLIST_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableVERSION->TODOLIST_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'TODOLIST_Id\' in table \'VERSION\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::VERSIONRow::TODOLIST_Id::set(System::Int32 value) {
        this[this->tableVERSION->TODOLIST_IdColumn] = value;
    }
    
    inline ToDoList::NewDataSet::TODOLISTRow^  NewDataSet::VERSIONRow::TODOLISTRow::get() {
        return (cli::safe_cast<ToDoList::NewDataSet::TODOLISTRow^  >(this->GetParentRow(this->Table->ParentRelations[L"TODOLIST_VERSION"])));
    }
    inline System::Void NewDataSet::VERSIONRow::TODOLISTRow::set(ToDoList::NewDataSet::TODOLISTRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"TODOLIST_VERSION"]);
    }
    
    inline ::System::Boolean NewDataSet::VERSIONRow::IsVERSION9Null() {
        return this->IsNull(this->tableVERSION->VERSION9Column);
    }
    
    inline ::System::Void NewDataSet::VERSIONRow::SetVERSION9Null() {
        this[this->tableVERSION->VERSION9Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::VERSIONRow::IsVERSION8Null() {
        return this->IsNull(this->tableVERSION->VERSION8Column);
    }
    
    inline ::System::Void NewDataSet::VERSIONRow::SetVERSION8Null() {
        this[this->tableVERSION->VERSION8Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::VERSIONRow::IsVERSION7Null() {
        return this->IsNull(this->tableVERSION->VERSION7Column);
    }
    
    inline ::System::Void NewDataSet::VERSIONRow::SetVERSION7Null() {
        this[this->tableVERSION->VERSION7Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::VERSIONRow::IsVERSION6Null() {
        return this->IsNull(this->tableVERSION->VERSION6Column);
    }
    
    inline ::System::Void NewDataSet::VERSIONRow::SetVERSION6Null() {
        this[this->tableVERSION->VERSION6Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::VERSIONRow::IsVERSION5Null() {
        return this->IsNull(this->tableVERSION->VERSION5Column);
    }
    
    inline ::System::Void NewDataSet::VERSIONRow::SetVERSION5Null() {
        this[this->tableVERSION->VERSION5Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::VERSIONRow::IsVERSION4Null() {
        return this->IsNull(this->tableVERSION->VERSION4Column);
    }
    
    inline ::System::Void NewDataSet::VERSIONRow::SetVERSION4Null() {
        this[this->tableVERSION->VERSION4Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::VERSIONRow::IsVERSION3Null() {
        return this->IsNull(this->tableVERSION->VERSION3Column);
    }
    
    inline ::System::Void NewDataSet::VERSIONRow::SetVERSION3Null() {
        this[this->tableVERSION->VERSION3Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::VERSIONRow::IsVERSION2Null() {
        return this->IsNull(this->tableVERSION->VERSION2Column);
    }
    
    inline ::System::Void NewDataSet::VERSIONRow::SetVERSION2Null() {
        this[this->tableVERSION->VERSION2Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::VERSIONRow::IsVERSION1Null() {
        return this->IsNull(this->tableVERSION->VERSION1Column);
    }
    
    inline ::System::Void NewDataSet::VERSIONRow::SetVERSION1Null() {
        this[this->tableVERSION->VERSION1Column] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::VERSIONRow::IsTODOLIST_IdNull() {
        return this->IsNull(this->tableVERSION->TODOLIST_IdColumn);
    }
    
    inline ::System::Void NewDataSet::VERSIONRow::SetTODOLIST_IdNull() {
        this[this->tableVERSION->TODOLIST_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::TODOLISTRowChangeEvent::TODOLISTRowChangeEvent(ToDoList::NewDataSet::TODOLISTRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline ToDoList::NewDataSet::TODOLISTRow^  NewDataSet::TODOLISTRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::TODOLISTRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::TASKRowChangeEvent::TASKRowChangeEvent(ToDoList::NewDataSet::TASKRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline ToDoList::NewDataSet::TASKRow^  NewDataSet::TASKRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::TASKRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::CATEGORYRowChangeEvent::CATEGORYRowChangeEvent(ToDoList::NewDataSet::CATEGORYRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline ToDoList::NewDataSet::CATEGORYRow^  NewDataSet::CATEGORYRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::CATEGORYRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::STATUSRowChangeEvent::STATUSRowChangeEvent(ToDoList::NewDataSet::STATUSRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline ToDoList::NewDataSet::STATUSRow^  NewDataSet::STATUSRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::STATUSRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::PERSONRowChangeEvent::PERSONRowChangeEvent(ToDoList::NewDataSet::PERSONRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline ToDoList::NewDataSet::PERSONRow^  NewDataSet::PERSONRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::PERSONRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::ALLOCATEDBYRowChangeEvent::ALLOCATEDBYRowChangeEvent(ToDoList::NewDataSet::ALLOCATEDBYRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline ToDoList::NewDataSet::ALLOCATEDBYRow^  NewDataSet::ALLOCATEDBYRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::ALLOCATEDBYRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::VERSIONRowChangeEvent::VERSIONRowChangeEvent(ToDoList::NewDataSet::VERSIONRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline ToDoList::NewDataSet::VERSIONRow^  NewDataSet::VERSIONRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::VERSIONRowChangeEvent::Action::get() {
        return this->eventAction;
    }
}
